<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuxin-miao.github.io</id>
    <title>Xinmiao</title>
    <updated>2022-11-10T12:41:20.405Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuxin-miao.github.io"/>
    <link rel="self" href="https://yuxin-miao.github.io/atom.xml"/>
    <subtitle>Hi :)&lt;br&gt; 
Student &lt;br&gt; 
CS MS @ KTH | ECE BS @ SJTU
</subtitle>
    <logo>https://yuxin-miao.github.io/images/avatar.png</logo>
    <icon>https://yuxin-miao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Xinmiao</rights>
    <entry>
        <title type="html"><![CDATA[Animeet]]></title>
        <id>https://yuxin-miao.github.io/post/animeet/</id>
        <link href="https://yuxin-miao.github.io/post/animeet/">
        </link>
        <updated>2022-06-21T21:32:51.000Z</updated>
        <summary type="html"><![CDATA[<p>A web-based visualization tool for anime dataset.</p>
]]></summary>
        <content type="html"><![CDATA[<p>A web-based visualization tool for anime dataset.</p>
<!-- more -->
<p><a href="https://animeet-nine.vercel.app/">Website</a><br>
<a href="https://animeet-nine.vercel.app/demo">Demo</a><br>
Course project done in DH2321 (Information Visualization) | 2022.02-2022.03 @ KTH Royal Institute of Technology</p>
<h1 id="description">Description</h1>
<p>Are you exploring some new animes to watch? Finding one that you like from a huge pool of animes can be difficult. Animeet visualizes all the animes using scatterplot, provides various filters, and offers detailed information! Use Animeet to find out your heart's animes and get the best watching experience.</p>
<h1 id="features">Features</h1>
<p><strong>Visualization Mappings</strong></p>
<ul>
<li>Visualize 18000+ animes data through scatterplot, provides an overview of all the aniems.</li>
<li>Visualize animes through line charts, including <em>number vs. rank, rating, episodes, followers</em>.</li>
<li>Visualize related animes about the selected anime through force-directed graph.</li>
</ul>
<p><strong>Filters</strong></p>
<ul>
<li>Change X/Y Axis of scatterplot to any attribute.</li>
<li>Filter animes based on selected <em>studio, number of followers, types, released seasons, tags, and content warnings</em>.</li>
</ul>
<p><strong>Searchbox</strong></p>
<ul>
<li>Search one specific anime to check its informaiton and related animes.</li>
<li>Search one voice actors to check all the animes that he/she participated in.</li>
</ul>
<p><strong>Info Panel</strong></p>
<ul>
<li>Display information of selected anime, including poster, description, tags, voice actors, staff, number of followers, and etc.</li>
</ul>
<h1 id="about">About</h1>
<p>In this project, I'm responsible for</p>
<ul>
<li>creating the initial version of the scatterplot by D3.js.</li>
<li>implementing the Range selection component and built line charts by D3.js.</li>
<li>implementing the search box component with auto-complete function.</li>
<li>developing the pages About, Team and Demo.</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Awakening of Sonny]]></title>
        <id>https://yuxin-miao.github.io/post/awakening-of-sonny/</id>
        <link href="https://yuxin-miao.github.io/post/awakening-of-sonny/">
        </link>
        <updated>2022-06-15T03:46:54.000Z</updated>
        <summary type="html"><![CDATA[<p>An action-adventure game created with Unity.</p>
]]></summary>
        <content type="html"><![CDATA[<p>An action-adventure game created with Unity.</p>
<!-- more -->
<p><a href="https://awakeningofsonny.framer.website/">Website</a><br>
<a href="https://drive.google.com/file/d/1CPKC3rrsXZ0Tqu0FuqUQ6MGiL3hcrR91/view?usp=sharing">Demo</a><br>
Course project done in DH2650 (Computer Game Design) | 2022.03-2022.05 @KTH Royal Institute of Technology</p>
<h1 id="description">Description</h1>
<p>Awakening of Sonny is an action-adventure game with a sci-fi story background. The game features a souls-like combat system, third-person shooting system and a placement system. We aim to provide players with various interesting ways to play through the game</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stock Price Prediction]]></title>
        <id>https://yuxin-miao.github.io/post/stock-price-prediction/</id>
        <link href="https://yuxin-miao.github.io/post/stock-price-prediction/">
        </link>
        <updated>2020-12-15T02:59:27.000Z</updated>
        <summary type="html"><![CDATA[<p>The project mainly focus on analysis procedure, but not final model training/test accuracy. So no popular machine learning algorithm (for regression root requirement).</p>
]]></summary>
        <content type="html"><![CDATA[<p>The project mainly focus on analysis procedure, but not final model training/test accuracy. So no popular machine learning algorithm (for regression root requirement).</p>
<!-- more -->
<p><a href="https://github.com/yuxin-miao/Stock_Price_Prediction">Github Repo</a> with detailed introdution.<br>
Course Project done in VE406 (Apply Linear Regression using R) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University</p>
<p>Quick Overview:<br>
<img src="https://yuxin-miao.github.io/post-images/1663257759085.png" alt="Poster" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VE370 Notes]]></title>
        <id>https://yuxin-miao.github.io/post/ve370-notes/</id>
        <link href="https://yuxin-miao.github.io/post/ve370-notes/">
        </link>
        <updated>2020-12-14T06:35:47.000Z</updated>
        <summary type="html"><![CDATA[<p>Course Notes for VE370 (Introduction to Computer Organizations) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Course Notes for VE370 (Introduction to Computer Organizations) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
<!-- more -->
<p>To run the .s file direclty through bash, use</p>
<pre><code class="language-bash">spim -bare
read &quot;&quot;
run
</code></pre>
<p>REMEMBER: 2’s complement</p>
<h1 id="chapter-1">Chapter 1</h1>
<p>Performance<br>
To run the .s file direclty through bash, use</p>
<pre><code class="language-bash">spim -bare
read &quot;&quot;
run
</code></pre>
<p>REMEMBER: 2’s complement</p>
<h1 id="chapter-1-2">Chapter 1</h1>
<p>Performance</p>
<ul>
<li>
<figure data-type="image" tabindex="1"><img src="https://yuxin-miao.github.io/post-images/1663252750895.png" alt="" loading="lazy"></figure>
</li>
<li>
<p><strong>ISA</strong>: Instruction Set Architecture</p>
</li>
<li>
<p>Instruction count: <strong>IC</strong> (由program, ISA, complier 决定)</p>
</li>
<li>
<p>Clock Cycle per Instruction: <strong>CPI</strong></p>
</li>
<li>
<p>Clock Cycles = IC * CPI</p>
</li>
</ul>
<blockquote>
<p>momorize the equation</p>
<p>GHz = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p>
</blockquote>
<h1 id="chapter-2">Chapter 2</h1>
<p center> **Operation and Operands ** </p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20200918202135979.png" alt="image-20200918202135979" style="zoom:50%;" />
<pre><code class="language-bash"># c language 
# need preprocessor 
gcc -E test.c &gt; test.i

gcc -S test.s # obtain test.s
gcc -c test.c # obtain test.o, which is machine code to read $ hexdump text.o
/*or*/
hexdump -C test.c # to show ASCII 
gcc test.o -o test # obtain executable machine code test 
# so gcc could followed by test.c or test.o

</code></pre>
<ul>
<li>Instruction Set
<ul>
<li>RISC: reduced instruction set computer</li>
<li>CISC: complex instruction set computer</li>
</ul>
</li>
</ul>
<p>MIPS Instruction Set</p>
<p>Design Principle</p>
<ol>
<li>Simplicity favors regularity.</li>
<li>Smaller is faster</li>
<li>Make the common case faster</li>
</ol>
<h2 id="register-operands">Register Operands</h2>
<p>MIPS architecture has a 32*32-bit register file</p>
<blockquote>
<p>$zero: constant 0 (reg 0, also written as 0)<br>
$at: Assembler Temporary (reg 1, or 1)<br>
$v0, v1: result values (reg’s 2 and 3, or 2 and 3); use value for function result<br>
$a0 – a3: arguments (reg’s 4 – 7, or 4 - 7)<br>
$t0 – t7: temporaries (reg’s 8 – 15, or 8 - 15); can be overwritten by callee<br>
$s0 – s7: saved (reg’s 16 – 23, or 16 - 23); be saved/restored by callee<br>
$t8, t9: temporaries (reg’s 24 and 25, or 24 and 25)<br>
$k0, k1: reserved for OS kernel (reg’s 26 and 27, 26/27)</p>
<p>$gp: global pointer for static data (reg 28, or 28)<br>
$sp: stack pointer (reg 29, or 29)<br>
$fp: frame pointer (reg 30, or 30)<br>
$ra: return address (reg 31, or $31)</p>
</blockquote>
<pre><code class="language-assembly">lw rt, offset(rs)# offset should be 4*(an integer) offset: a 16-bits 2's complement number


## Byte/Halfword Operations R[rt] = Mem[R[rs] + signExtensionOffest] 为32bits与16bits相加##
lb rt, offset(rs) # offset could be any integer (-2 is okey)
lh rt, offset(rs # repeat the sign bit

lbu rt, offset(rs) # for unsigned byte; 
lhu rt, offset(rs) # repeat zero

sb rt, offset(rs) 
sh rt, offset(rs)

</code></pre>
<h2 id="memory-operands">Memory Operands</h2>
<ul>
<li>
<p>mainly for composite data (arrays, structures, dynamic data)</p>
</li>
<li>
<p>steps</p>
<ul>
<li><code>lw</code>: from memory into registers</li>
<li>perfrom arithmetic operations with registers</li>
<li><code>sw</code>: from register back to memory</li>
</ul>
</li>
<li>
<p>Byte addressable - each address identifies a 8-bit byte</p>
</li>
<li>
<p>organized in word</p>
</li>
<li>
<p>Big/little Endian: MIPS is big Endian</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20200918185859922.png" alt="image-20200918185859922" style="zoom:50%;" />
</li>
</ul>
<pre><code class="language-c">g = h + A[8]
</code></pre>
<p>h in $s2, base address of A in $s3</p>
<h3 id="load-word">load word</h3>
<p>from the content in register ($s3), the content + offset (32), is the address of the content need to be loaded.</p>
<p>The content in the address ( Reg[$s3]) + offset (32)) is loaded in $t0</p>
<p><code>$t0</code> load in the content in this address. Content: A[8]</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917162604239.png" alt="image-20200917162604239" style="zoom:50%;" />
<h3 id="store-word">Store Word</h3>
<pre><code class="language-assembly">lw $t0, 32($s3)
add $t0, $s2, $t0
sw $t0, 48($s3) 
</code></pre>
<p>Store the content in $t0, into the content of the address (content in $s3 + 48)</p>
<p>![image-20200917162852822](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917162852822.png)</p>
<ul>
<li>
<p>difference between <code>lb</code> and <code>lbu</code></p>
<p><code>lb</code>: load byte; R[rt] = SignExt(M[R[rs]+SignExtImm])</p>
<p><code>lbu</code>: load byte unsigned; R[rt] = {24b'0,M[R[rs]+SignExtImm] (7:0)}</p>
</li>
</ul>
<h2 id="immediate-operands-constant">Immediate Operands (constant)</h2>
<p><code>sll</code> by i bits = multiply by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></p>
<p><code>srl</code> by i bits = divides by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> (unsigned only)</p>
<h3 id="load-32-bits-constant">load 32-bits constant</h3>
<ul>
<li><code>lui rt, constant</code>
<ul>
<li>copies 16-bit constant to left 16 bits of rt</li>
<li>clear right 16-bits of rt to 0</li>
</ul>
</li>
<li><code>ori $t0, $t0, 0x....</code> $t1 = $t2| ZeroExtImm</li>
</ul>
<pre><code class="language-assembly"># load 0x56781234 to register $s3
lui $s3, 0x5678
ori $s3, $s3, 0x1234
</code></pre>
<p>For the number stored in a byte if its value is larger than <strong>(10000000) or(80)hex</strong>. If we want to load its original value to a new register, we need to use <code>lbu</code>. If we use lb at this time, the value stored in the new register will be negative.</p>
<h2 id="iffor">If/For</h2>
<p>no <code>blt</code>, <code>bge</code>, <code>ble</code>, <code>bgt</code></p>
<p><code>beq</code>, <code>bne</code> common; combined with <code>slt</code>, <code>slti</code>, <code>sltiu</code></p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918204354042.png" alt="image-20200918204354042" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918204439309.png" alt="image-20200918204439309" style="zoom:33%;" />
<h2 id="bytehalfword-operations">Byte/Halfword Operations</h2>
<pre><code class="language-assembly"># i.e. load in byte 0xFA
/*Signed, with sign extension*/
	lb rt, offset(rs)		# offset could be any integer;in rt 0xFFFFFFFA
	lh rt, offset(rs)
/*Unsigned, with zero extension*/
	lbu rt, offset(rs)		# offset could be any integer; in rt 0x000000FA
	lhu rt, offset(rs)
</code></pre>
<p><font color=#CD5C5C>有时候要注意offset是否要乘4，如果array是存储的bytes而不是words，则不需要乘4</font></p>
<h2 id="assembly-language">Assembly Language</h2>
<p>Example.c</p>
<pre><code class="language-c">int add_a_and_b(int a, int b) {
   return a + b;
}

int main() {
   return add_a_and_b(2, 3);
}
</code></pre>
<p>转化为汇编语言</p>
<pre><code>$ gcc -S example.c
</code></pre>
<p>**arm! but not mips **</p>
<p>example.s</p>
<pre><code class="language-assembly">_add_a_and_b: # 并不是标准命令
   push   %ebx
   mov    %eax, [%esp+8] 
   mov    %ebx, [%esp+12]
   add    %eax, %ebx 
   pop    %ebx # pop会将ESP寄存器中地址加4
   ret  # 当前函数frame被回收

_main:
   push   3  # push: CPU指令，将运算子放入stack，即3写入main这个frame
   push   2 # push会将ESP寄存器中地址减4
   call   _add_a_and_b # call：调用函数
   add    %esp, 8
   ret
</code></pre>
<p>从<code>_main</code>开始执行，在stack上为main建立一个frame（帧）,stack所指向的地址写入ESP寄存器。数据若要写入main这个frame，则写在ESP寄存器所保存的地址。stack：从高位向地位发展。ESP中地址减去四个字节（int）后，新地址写入ESP</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/2018/bg2018012216.png" alt="bg2018012216" loading="lazy"></figure>
<h1 id="chapter-3">Chapter 3</h1>
<p><strong>Function</strong></p>
<p>program stored in memory , instructions represented in binary, like data. <em>Each instruction is stored as a word in PC, so 0:0, 4:100, 8: 1000</em>, all the instruction will be ended with 2’b0.</p>
<h2 id="program-counter"><strong>program counter</strong></h2>
<p>(PC) (instruction address register)</p>
<ul>
<li>address of the instruction is sotred in PC</li>
<li>32 bits register</li>
<li>a special register in CPU (not same as the registers in register file)</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917145047483.png" alt="image-20200917145047483" style="zoom:30%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917153557980.png" alt="image-20200917153557980" style="zoom:40%;" />
<h2 id="function-calling">function calling</h2>
<blockquote>
<p>Similarly, in the execution of a procedure, the program must follow these six steps:</p>
<ol>
<li>Put parameters in a place where the procedure can access them.</li>
<li>Transfer control to the procedure.</li>
<li>Acquire the storage resources needed for the procedure.</li>
<li>Perform the desired task.</li>
<li>Put the result value in a place where the calling program can access it.</li>
<li>Return control to the point of origin, since a procedure can be called from several points in a program.</li>
</ol>
</blockquote>
<h3 id="function-call-instructions">Function call instructions</h3>
<ul>
<li>
<p><em>Function call operation</em>:  jump-and-link instruction <code>jal FunctionLabel</code> (J-type)</p>
<p>An instruction that jumps to an address and simultaneously saves the address of the following instruction in a register ($ra in MIPS).</p>
<ul>
<li>$ra = PC+4 (the address of following instruction)</li>
<li>PC = Addr(function label)</li>
</ul>
</li>
<li>
<p><em>Function return operation</em>: jump register <code>jr $ra</code> (R-type)</p>
<ul>
<li>PC = $ra; Copies $ra to program counter</li>
</ul>
</li>
<li>
<p>return address</p>
<p>A link to the calling site that allows a procedure to return to the proper address;</p>
<p>in MIPS it is stored in register $ra.</p>
</li>
<li>
<p>caller: The program that instigates a procedure and provides the necessary parameter values.</p>
</li>
<li>
<p>Callee: A procedure that executes a series of stored instructions based on parameters provided by the caller and then returns control to the caller.</p>
</li>
<li>
<p><strong>stack pointer</strong> ($sp)</p>
</li>
<li>
<p>pointing to the <strong>top of the stack</strong></p>
<ul>
<li>By mean top, not mean when adding more items, the address of $sp would not become larger, but it should be subtracion.</li>
</ul>
</li>
<li>
<p>frame pointer ($fp)</p>
</li>
</ul>
<p>a frame pointer offers a stable base register within a procedure for local memory-references. as $sp might change</p>
<h3 id="leaf-function">leaf function</h3>
<blockquote>
<p>Eg1: see swap</p>
</blockquote>
<p>function that don’t call other functions</p>
<pre><code class="language-assembly">addi $sp, $sp, -12 # create spaces in stack
sw $t1, 8($sp) # store data on stack
sw $t0, 4($sp) # actually, no need to operate on $t0 and $t1
sw $s0, 0($sp)
....

lw $s0, 0($sp) # restore data from stack
lw $t0, 4($sp)
lw $t1, 8($sp)
addi $sp, $sp, 12 # destroy spaces on stack
jr $ra # return from function
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917215149676.png" alt="image-20200917215149676" style="zoom:40%;" />
<h3 id="non-leaf-funciton">Non-leaf funciton</h3>
<blockquote>
<p>Eg2: see sort</p>
</blockquote>
<p>function that calls other functions</p>
<p>For nested call, caller need to save on the stack</p>
<ol>
<li>
<p>its return address</p>
</li>
<li>
<p>any arguments and temporaries needed after the call</p>
</li>
</ol>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918091228677_副本.png" alt="image-20200918091228677" style="zoom:50%;" />
<pre><code class="language-c">int fact (int n) {
  if (n &lt; 1) return f;
  else return n * fact(n - 1)
}
</code></pre>
<p>argument n in $a0, result in $v0</p>
<pre><code class="language-assembly">fact: 
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		sw $a0, 0($sp)
		slti $t0, $a0, 1
		beq $t0, $zero, L1 # the label tells where to go, such that L1 should have the address 
		addi $v0, $zero, 1
		addi $sp, $sp, 8
		jr $ra
L1: 
		addi $a0, $a0, -1
		jal fact
		lw $a0, 0($sp)
		lw $ra, 4($sp)
		addi $sp, $sp, 8
		mul $v0, $a0, $v0
		jr $ra

</code></pre>
<h2 id="function-calling-convention">Function Calling Convention</h2>
<p>do not follow convention not mean syntax error, but highly likely to create error</p>
<p>when to apply</p>
<ul>
<li>
<p>immediatly before the function is called</p>
<ul>
<li>pass arguments to $a0 - $a3 (more arguments on stack, addressable via $fp)</li>
<li>save register that should be saved by caller ( i.e. $a0 - $a3  non-leaf function)</li>
<li><code>jal</code></li>
</ul>
</li>
<li>
<p>in function, but before it starts executing</p>
<ul>
<li>allocate memory of frame’s size (moving $sp downwards)</li>
<li>Save registers that should be saved by the function in the frame, before they are overwritten ($s0-$s7 (if to be used), $fp (if used), ​$ra (non- leaf function))</li>
<li>Establish $fp (if desired), $fp = $sp + frame’s size - 4</li>
</ul>
</li>
<li>
<p>immediatly before the funtion finishes</p>
<ul>
<li>if necessary, place the function result to $v0, $v1</li>
<li>Restore registers saved by the function (pop from frame)</li>
<li>destroy stack frame (by moving $sp upwards)</li>
<li><code>jr $ra</code></li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200920130607592.png" alt="image-20200920130607592" style="zoom:67%;" />
</li>
</ul>
<h2 id="example">Example</h2>
<p>When translate from C to assembly language</p>
<blockquote>
<ol>
<li>Allocate registers to program variables.</li>
<li>Produce code for the body of the procedure.</li>
<li>Preserve registers across the procedure invocation.</li>
</ol>
</blockquote>
<ul>
<li><code>swap</code></li>
</ul>
<pre><code class="language-c">void swap(int v[], int k) {
	int temp;
	temp = v[k]; 
  v[k] = v[k+1]; 
  v[k+1] = temp;
}
</code></pre>
<pre><code>1. program argument: `$a0, $a1 -&gt; v, k` 		temporary variable: `$t0 -&gt; temp`
</code></pre>
<ol start="2">
<li>
<pre><code class="language-assembly">/*procedure body*/
swap: sll $t1, $a1, 2 # $t1 = k * 4
      add $t1, $a0, $t1 # t1 = v + k * 4, the address of v[k]
      
      lw $t0, 0($t1) # $t1 (temp) = v[k]; load the content in address 0($t1) to the content oof $t0
      lw $t2, 4($t1) # $t2 = v[k+1];
      
      sw $t2, 0($t1) # v[k] = v[k+1]; store the content in $t2 to thr content in address 0($t1)
      sw $t0, 4($t1) # v[k+1] = temp;
/*procedure return*/
      jr $ra
</code></pre>
</li>
</ol>
<ul>
<li><code>sort</code></li>
</ul>
<pre><code class="language-c">void sort (int v[], int n) {
  int i, j;
  for (i = 0; i &lt; n; i += 1) {
  	for (j = i – 1; j &gt;= 0 &amp;&amp; v[j] &gt; v[j + 1]; j -= 1) { 
      swap(v,j);
  	} 
  }
}
</code></pre>
<p>Problem: <code>sort</code> needs the value in $a0 and $a1, <code>swap</code> need to have the parameters placed in those same registers.</p>
<p>v in $a0, n in $a1, i in $s0, j in $s1</p>
<pre><code class="language-assembly">sort:
		addi $sp, $sp, -20
		sw $ra, 16($sp)
		sw $s3, 12($sp)
		sw $s2, 8($sp)
		sw $s1, 4($sp)
		sw $s0, 0($sp)
		add $s2, $a0, $zero	# $s2 = BA of v
		add $s3, $a1, $zero	# s3 = n
		add $s0, $zero, $zero	# i = 0
for1tst: 
		slt $t0, $s0, $s3
		beq $t0, $zer0, exit1 # when i &gt;= n, exit the first loop
		addi $s1, $s0, -1 # j = i - 1
for2tst:
		slt $t0, $s1, 0
		bne $t0, $zero, exit2 # when j &lt; 0 exit the second loop
		sll $t1, $s1, 2 # $t1 = j*4
		add $t2, $t1, $s2 # t2: the address of v[j]; v + j * 4
		lw $t3, 0($t2) # v[j]
		lw $t4, 4($t2) # v[j + 1]
		sll $t0, $t4, $t3
		beq $t0, $zero, exit2 # v[j] &lt; v[j + 1]
		add $a0, $s2, $zero # prepare for the paramete needed for next function call swap
		add $a1, $s1, $zero
		jal swap
		addi $s1, $s1, -1
		j for2tst
exit2: 
		addi $s0, $s0, 1 #i+=1
		j for1tst
exit1: 
	 lw $s0, 0($sp)
	 lw $s1, 4($sp)
	 lw $s2, 8($sp)
	 lw $s3, 12($sp)
	 lw $ra, 16($sp)
	 addi $sp, $sp, 12
	 jr $ra 							# return to calling routine 
</code></pre>
<ul>
<li><code>fib</code></li>
</ul>
<pre><code class="language-c">int fib(int n) {
  if (n &lt; 3)
    return 1;
  else 
    return fib(n-1) + fib(n-2); 
}
</code></pre>
<pre><code class="language-assembly">fib:
	addi 	$sp, $sp, -12
	sw		$s0, 8($sp)
	sw 		$a0, 4($sp)
	sw		$ra, 0($sp)
	slti	$t0, $a0, 3
	beq		$t0, $zero, else
	# lw		$ra, 0($sp) unnecessary load here 
	# lw		$a0, 4($sp)
	addi	$sp, $sp, 12 
	addi	$v0, $zero, 1
	jr		$ra

else:
	lw		$ra, 0($sp)
	lw		$a0, 4($sp)
	addi 	$a0, $a0, -1
	jal	 	fib

	add	 	$s0, $v0, $zero	# we need $s0 to store the value so adjust the stack for 3 items 
	sw 		$a0, 4($sp)
	sw		$ra, 0($sp)
	addi 	$a0, $a0, -2
	jal 	fib
	addi 	$t1, $v0, 0
	lw		$ra, 0($sp)
	lw		$a0, 4($sp)
	addi	$sp, $sp, 8
	add		$v0, $t1, $t0
	jr 		$ra
</code></pre>
<pre><code class="language-assembly"># VE370 2020FA RC Week 3
# Class exercise: fib
# Author: Li Shi

# Important note: 
#   This program is written in Linux, and executed by
#     1. spim -bare
#     2. (spim) read &quot;fib.s&quot;
#     3. (spim) run
#   You may need to modify this program to execute in PCSpim.

.text

main:
  addi  $a0,  $0,   8
  jal   fib                 # Call fib(8)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $a0,  $v0,  0       # Print fib(8)
  addi  $v0,  $0,   1       
  syscall
  addi  $v0,  $0,   10      # System call 10 (exit)
  syscall                   # Exit

fib:
  addi  $sp,  $sp,  -12     # Allocate the stack frame
  sw    $ra,  8($sp)
  sw    $a0,  4($sp)
  sw    $s0,  0($sp)        # We will use $s0 later
  slti  $t0,  $a0,  3       # Test for n &lt; 3
  beq   $t0,  $0,   elseBlock
  addi  $v0,  $0,   1       # return 1 
  addi  $sp,  $sp,  12 
  jr    $ra
  add   $t0,  $t0,  $0      # Delay

elseBlock:
  addi  $a0,  $a0,  -1
  jal   fib                 # fib(n-1)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $s0,  $v0,  0       # Q: What is $s0 used for?
  addi  $a0,  $a0,  -1
  jal   fib                 # fib(n-2)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  add   $v0,  $v0,  $s0     # return fib(n-1)+fib(n-2)
  lw    $s0,  0($sp)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  lw    $a0,  4($sp)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  lw    $ra,  8($sp)    
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $sp,  $sp,  12      # Pop the stack
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  jr    $ra
  add   $t0,  $t0,  $0      # Delay

</code></pre>
<h2 id="template">Template</h2>
<ul>
<li>if ($s0 &lt; $s1) { ... } else { ... }</li>
</ul>
<pre><code class="language-assembly">      slt $t0, $s0, $s1
      beq $t0, $zero, else 
      ....
      j elseExit ## remember to jump out when finish if 
else: ....
elseExit: 
</code></pre>
<ul>
<li>for ($t0 = 0; $t0 &lt; $a1; $t0++) { ... }</li>
</ul>
<pre><code class="language-assembly">Loop:
		add $t0, $zero, $zero
		slt $t1, $t0, $a1
		beq $t1, $zero, exit
		...
		addi $t0, $t0, 1
		j Loop
exit:
</code></pre>
<h2 id="translation-and-startup">Translation and Startup</h2>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919103108277.png" alt="image-20200919103108277" style="zoom:33%;" />
<h3 id="complier">Complier</h3>
<p>tansform the C program into an assembly language program (a symbolic form of waht the machine understands)</p>
<h3 id="assembler">assembler</h3>
<blockquote>
<p>To produce the binary version of each instruction in the assembly language program, the assembler must determine the addresses corresponding to all labels. Assemblers keep track of labels used in branches and data transfer instructions in a <strong>symbol table</strong>. As you might expect, the table contains pairs of symbols and addresses.</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919104550827.png" alt="image-20200919104550827" style="zoom:33%;" />
<p><strong>producing an object module</strong></p>
<p>Example</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919105156829.png" alt="image-20200919105156829" style="zoom:33%;" />
<p>​			- In the object file:</p>
<blockquote>
<p>the instructions in assembly language just to make the example understandable; in reality, the instructions would be numbers.</p>
</blockquote>
<p>​		<em>Note that the address and symbols that must be updated in the link process is higlighted</em>:</p>
<pre><code>			1. the instructions that refer to the address of procedures $A$ and $B$

			2. the instructions that refers to the data word $X$ and $Y$
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919105719045.png" alt="image-20200919105719045" style="zoom:50%;" />
<h3 id="linker">linker</h3>
<p>Also called link editor. A systems program that combines independently assembled machine language programs and resolves all undefined labels into an <strong>executable file</strong>.</p>
<ol>
<li>
<p>merge segments</p>
</li>
<li>
<p>resolve labels (determine their address)</p>
</li>
<li>
<p>patch location-dependent and external reference</p>
</li>
</ol>
<p><strong>example of linked objects</strong></p>
<p>Object is already machine language, but no memory has been traslated (the translator do not know about)</p>
<blockquote>
<p>the text segment starts at address 40 0000hex and the data segment at 1000 0000hex.</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919111236159.png" alt="image-20200919111236159" style="zoom:50%;" />
<blockquote>
<ol>
<li>The jals are easy because they use pseudodirect addressing. The jal at address 40 0004hex gets 40 0100hex (the address of procedure B) in its address field, and the jal at 40 0104hex gets 40 0000hex (the address of procedure A) in its address field.</li>
<li>The load and store addresses are harder because they are relative to a base register. This example uses the global pointer as the base register. Figure 2.13 shows that $gp is initialized to 1000 8000hex. To get the address 1000 0000hex (the address of word X), we place 8000hex in the address field of lw at address 40 0000hex (Because it is 2’s complement). Similarly, we place ­7980hex in the address field of sw at address 40 0100hex to get the address 1000 0020hex (the address of word Y).</li>
<li>also output an object file</li>
</ol>
</blockquote>
<h3 id="loader">Loader</h3>
<blockquote>
<ol>
<li>Reads the executable file header to determine size of the text and data segments.</li>
<li>Creates an address space large enough for the text and data.</li>
<li>Copies the instructions and data from the executable file into memory.</li>
<li>Copies the parameters (if any) to the main program onto the stack.</li>
<li>Initializes the machine registers and sets the stack pointer to the first free location. ($sp, $gp, $fp)</li>
<li>Jumps to a start-up routine.
<ul>
<li>copies the parameters into the argument registers  ($a0...) and calls the main routine</li>
<li>When the main routine returns, the start-up routine terminates the program with an exit system call</li>
</ul>
</li>
</ol>
</blockquote>
<p>之前讲了static link， 即before the program is run <em>1. the library routines become part of the executable file 2. it loads all routines in the library that are called anywhere executable</em></p>
<p>so -&gt; <strong>dynamically linked libraries (DLLs)</strong>: Library routines that are linked to a program during execution.</p>
<h3 id="dynamic-linking">Dynamic Linking</h3>
<p>dll: dynamic linking library</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919113501211.png" alt="image-20200919113501211" style="zoom:50%;" />
<h1 id="topic-4">Topic 4</h1>
<p>Instructoin coding, how the <strong>assembler and linker</strong> transform into machine code.</p>
<p>MIPS instruction -&gt; 32 bits words, translated into binary information (machine code)</p>
<p>first 6 bits -&gt; opcode always, for all three types. Based on this, CPU now what to do.</p>
<h2 id="r-format">R-format</h2>
<p>totally 32 bits, can see from the <strong>reference card</strong> ![image-20200928083358704](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928083358704.png)</p>
<h3 id="instruction-fields">Instruction fields</h3>
<p>Here is the meaning of each name of the fields in MIPS instructions:</p>
<ul>
<li><em>op:</em> Basic operation of the instruction, traditionally called the <strong>opcode</strong>.</li>
<li><em>rs:</em> The first register source operand.</li>
<li><em>rt:</em> The second register source operand.</li>
<li><em>rd:</em> The register destination operand. It gets the result of the operation.</li>
<li><em>shamt:</em> Shift amount. (Section 2.6 explains shift instructions and this term; it will not be used until then, and hence the field contains zero in this section.) only use when shift, represents the number we want to shift (0-31)</li>
<li><em>funct:</em> Function. This field, often called the <em>function code,</em> selects the specific variant of the operation in the op field.</li>
</ul>
<blockquote>
<p>add $t0, $s1, $s2</p>
<p>add: 0 (opcode)</p>
<p>rs: $s1 (5 -bits store the memory) 10001</p>
<p>rt: $s2 10010</p>
<p>rd: $t0 (becasue this is the register destination)01000</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084133611.png" alt="image-20200928084133611" style="zoom:33%;" />
<p><code>add</code> and <code>sub</code> have the same opcode, use the different <code>func</code> field to distinguish between these two.</p>
<h2 id="i-format">I-format</h2>
<p>i- immediate number</p>
<p>![image-20200928084210292](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084210292.png)</p>
<p><strong>rt: destination now</strong> however it could also be source (determine by read / write operation)</p>
<p>rs: source or base address register</p>
<p>constant / address: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> / offset added to base address in rs</p>
<p>Read: source register  			 Write: destination</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084346097.png" alt="image-20200928084346097" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084559327.png" alt="image-20200928084559327" style="zoom:33%;" />
<ul>
<li></li>
</ul>
<pre><code class="language-assembly">sw	$t0, 4($s0) 	# $s0-&gt;rs / $t0 -&gt; rt
</code></pre>
<p>read from the register both $s0-&gt;rs $t0-&gt;rt. // no destination register needed</p>
<p>relative address = (LOOP-PC-4)/4.  // because relative address should have a 32-bits address, so by calculation, we could use relative address (16 bits)</p>
<ul>
<li></li>
</ul>
<pre><code class="language-assembly">lui		$t0, 255 	# because $t0 is the destination register
</code></pre>
<table>
<thead>
<tr>
<th>opcode</th>
<th>rs</th>
<th>rt</th>
<th>Immediate</th>
</tr>
</thead>
<tbody>
<tr>
<td>001111</td>
<td>00000</td>
<td>01000</td>
<td>0000 0000 1111 1111</td>
</tr>
</tbody>
</table>
<ul>
<li></li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084836733.png" alt="image-20200928084836733" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201005110337077.png" alt="image-20201005110337077" style="zoom:50%;" />
<h2 id="j-format">J-format</h2>
<p>![image-20200928085339660](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928085339660.png)</p>
<p>encode full address in instruction, use 26 bits represent a 32 bits address</p>
<p>leave the first 4 bits of PC untouched.</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928085659606.png" alt="image-20200928085659606" style="zoom:33%;" />
<h2 id="addressing-in-branches-and-jumps">Addressing in Branches and Jumps</h2>
<ul>
<li>J-type: 6 bits for operation field and the rest of the bits for the address field.</li>
</ul>
<p><code>j 10000</code> can be assembled into</p>
<table>
<thead>
<tr>
<th style="text-align:center">2</th>
<th style="text-align:center">10000</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">6 bits</td>
<td style="text-align:center">26 bits</td>
</tr>
</tbody>
</table>
<p>the value of the jump opcode is 2 and the jump address is 10000</p>
<ul>
<li>PC-relative addressing</li>
</ul>
<p>a branch instruction would calculate: Program counter = Register + Branch address</p>
<p>for conditional branches: loops and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">if</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> statements</p>
<h2 id="decoding-machine-code">Decoding Machine Code</h2>
<ol>
<li>converting hex to binary to find <strong>op fields</strong>, determine the operation</li>
<li></li>
</ol>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928140704517.png" alt="image-20200928140704517" style="zoom:50%;" />
<ul>
<li>
<p>How to get address</p>
<ul>
<li>immediate addressing
<ul>
<li>I-type <code>addi $s0, $s1, -1</code></li>
</ul>
</li>
<li>register addressing
<ul>
<li>R-type / I-type : all or some operands provided by register IDs directly <code>add $t0, $s0, $s1</code></li>
</ul>
</li>
<li>base addressing
<ul>
<li>I-type: operands provided by using base address of memory location <code>lw $t0, 32($s0)</code></li>
</ul>
</li>
<li>PC-relative addressing
<ul>
<li>Operands relative to PC, used for near branch <em>target address = PC + 4 + offest * 4</em> , <code>beq $s0, $s1, LESS</code></li>
</ul>
</li>
<li>Pseudodirect addressing
<ul>
<li>encode full address in instruction J-type (<code>j</code> and <code>jal</code>) <em>target address = PC[31:28] : address * 4</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>instructions from memory &amp; data from/into RF/memory</em></p>
  <img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200930114747486.png" alt="image-20200930114747486" style="zoom:33%;" />
<h1 id="t05">T05</h1>
<p>Review of Digital Logic</p>
<p>who to control reading  / writing? do not read / write at the same time -&gt; control signal in RF</p>
<ul>
<li>
<p>memory (access memory is slower than access RF, because of the big circuit of memory, need to decode the address)</p>
<ul>
<li>SRAM (Static RAM)</li>
</ul>
<figure data-type="image" tabindex="3"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930130847535.png?lastModify=1601950411" alt="image-20200930130847535" loading="lazy"></figure>
<ul>
<li>DRAM</li>
</ul>
<figure data-type="image" tabindex="4"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930131212504.png?lastModify=1601950411" alt="image-20200930131212504" loading="lazy"></figure>
<p>memory in MIPS</p>
<p>insturction memory: only read afterwards</p>
<p>data memory: only one address for read / write</p>
<figure data-type="image" tabindex="5"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930131317240.png?lastModify=1601950411" alt="image-20200930131317240" loading="lazy"></figure>
<p>If need write, write first</p>
</li>
</ul>
<h1 id="t06">T06</h1>
<p>Single Cycle Processor Chapter 4.1-4.4</p>
<p>■■ The <strong>memory-reference</strong> instructions load word (lw) and store word (sw)</p>
<p>■■ The <strong>arithmetic-logical</strong> instructions add, sub, AND, OR, and slt</p>
<p>■■ The instructions <strong>branch</strong> equal (beq) and jump (j), which we add last</p>
<p>PC is controled by clock signal</p>
<p>every instruction, needs: send the PC to the memory that contains the code and fetch the instruction from that memory / read one or two registers, using fields of the instruction to select.</p>
<p><em>state element:</em> a memory element, such as a register or a memory</p>
<ul>
<li>clocking methodology: edge-triggered clocking: a clocking scheme in which ass state changes occur on a clock edge. Only state elements can store data value, <strong>any collection of combinational logic must have its inputs come from a set of state elements and its outputs written into a set of state elements</strong>. The inputs are values that were written in a previous clock cycle, while the outputs  are values that can be used in a following clock cycle.</li>
<li>ALUOp &amp; funct -&gt; ALU Control</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007102736810.png" alt="image-20201007102736810" style="zoom:33%;" />
<p>​		Generate a 2-bit ALUOp (by CPI controller). With ALUOp and funct field -&gt; ALU control</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007103211448.png" alt="image-20201007103211448" style="zoom:50%;" />
<blockquote>
<p>​		that is, using multiple levels of decoding -&gt; reduce the size of the main control unit (opcode before)</p>
</blockquote>
<p>The corresponding truth table is as follows, don’t care term all represented with X</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007103747839.png" alt="image-20201007103747839" style="zoom:50%;" />
<ul>
<li>
<p>instruction format</p>
<p><code>opcode</code> bits [31:26] as Op[5:0]</p>
<p>Two register be read <code>rs</code> <code>rt</code> [25:21] and [20:16] (R-type, beq, store)</p>
<p>base register for load and store <code>rs</code> [25:21]</p>
<p>offset [15:0] (beq, load, store)</p>
<p>destination register - load: <code>rt</code> [20:16]</p>
<p>​									- R-type: <code>rd</code> [15:11] -&gt; use a Mux to select</p>
</li>
<li>
<p>usage of seven control lines</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007105307315.png" alt="image-20201007105307315" style="zoom:50%;" />
</li>
</ul>
<p>For R-type, will not use data memory</p>
<p>lw: read register from register file, ALU calculate the address, read data from data memory, store the data read back to register file</p>
<p>![image-20201013152850305](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201013152850305.png)</p>
<h3 id="clocking-methodology">Clocking Methodology</h3>
<p><code>lw</code> load type instruction will need most time (becasuse of read from data)</p>
<p><code>beq</code> only read from register and do some calculation, will not cost more time</p>
<p><em>sigle-cycle processor</em> is not feasible to vary period for differerent instructions</p>
<p>![image-20201016131205087](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201016131205087.png)</p>
<p>​	clock cycle time for single-cycle processor will be 800ps, regardless of the instructions’ distribution</p>
<p>​	execution time is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn><mo>∗</mo><mn>800</mn><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">100*800ps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></p>
<p><em>multi-cycle CPU</em> - FSM: each instruction takes multiple cycles to execute</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201016132709964.png" alt="image-20201016132709964" style="zoom:50%;" />
<p>​	still which operation will take the longest time - Instr Fetch: 200ps</p>
<p>​	However, with different distribution, multi-cycle will have different total execution time, some may be worse than single-cycle some may be worse.</p>
<h1 id="t07">T07</h1>
<p>Pipelined Processor</p>
<p>divide the big combinational circuit into five small stages, one step per stage per cycle</p>
<ol>
<li>IF:  Instruction fetch</li>
<li>ID:  Instruction decode and register file read</li>
<li>EX:  Execution or address calculation</li>
<li>MEM:  Data memory access</li>
<li>WB:  Write result back to register</li>
</ol>
<p>Single-clock-cycle diagram / multi-clock-cycle diagram</p>
<p>Instruction-level parallism: multiple instructions exectued at the same time</p>
<p>execution time for each instruction does not improve (all need to execute the five stages)</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020211402324.png" alt="image-20201020211402324" style="zoom:50%;" />
<h1 id="t08">T08</h1>
<p>Data Hazards</p>
<ul>
<li>add stalls: nop instructions</li>
<li>forwarding (bypassing) : use data before it is stored into the register</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020212106089.png" alt="image-20201020212106089" style="zoom:50%;" />
<p>hazard notation</p>
<p>1a.  EX/MEM.RegisterRd = ID/EX.RegisterRs</p>
<p>1b. EX/MEM.RegisterRd = ID/EX.RegisterRt</p>
<p>2a.  MEM/WB.RegisterRd = ID/EX.RegisterRs</p>
<p>2b. MEM/WB.RegisterRd = ID/EX.RegisterRt</p>
<ol>
<li>
<p>Forwarding in EX stage</p>
<p>we consider  only  the  challenge  of  forwarding  to  an  operation  in  the  EX  stage,  which  may  be  either an ALU operation or an effective address calculation. (instruction tries to use a register in its EX stage that an earlier instruction intends  to write in its WB stage, we actually need the values as inputs to the ALU. )</p>
<pre><code>EX hazard 
if (EX/MEM.RegWrite  // check whether previous a WB to register file needed 
 and (EX/MEM.RegisterRd ≠ 0)  // check whether we need to change the content of $zero
 and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) // check whether the destination register need to use for this ALU
 ForwardA = 10

if (EX/MEM.RegWrite
 and (EX/MEM.RegisterRd ≠ 0)
 and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020214146582.png" alt="image-20201020214146582" style="zoom:50%;" />
<blockquote>
<p>Note  that  the  EX/MEM.RegisterRd  field  is  the  register  destination  for  either  an ALU instruction (which comes from the Rd field of the instruction) or a load  (which comes from the Rt field).</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022085644224.png" alt="image-20201022085644224" style="zoom:50%;" />
<pre><code>MEM HARZARD
if (MEM/WB.RegWrite
	and (MEM/WB.RegisterRd ≠ 0)
	and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd ≠ 0))
			and (EX/MEM.RegisterRd ≠ ID/EX.RegisterRs)
	and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01

if (MEM/WB.RegWrite
	and (MEM/WB.RegisterRd ≠ 0)
	and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd ≠ 0))
		and (EX/MEM.RegisterRd ≠ ID/EX.RegisterRt)
	and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022085828078.png" alt="image-20201022085828078" style="zoom:50%;" />
<p>​	<strong>To select the signed immidiate, add another MUX unit (choose from the output of forward B between signExtend)</strong></p>
<p>​	<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022090130778.png" alt="image-20201022090130778" style="zoom:50%;" /></p>
</li>
</ol>
<h3 id="load-use-hazard-detection">Load use hazard detection</h3>
<p><em>If value not computed when needed</em></p>
<p>$2 is needed in <code>and</code> instruction before it is read from data mem</p>
<p><img src="/Users/yuxinmiao/Documents/JI/JI2020Fall/VE370/image/image-20201024104037856.png" alt="image-20201024104037856" loading="lazy">*</p>
<img src="./image/image-20201024103630013.png" alt="image-20201024103630013" style="zoom:50%;" />
<p>​	Add the stall(bubble) by</p>
<ul>
<li>Force control signals in ID/EX register to 0’s (the MUX) (nothing will do with this 0 control signals)</li>
<li>Prevent the update of PC and IF/ID register <code>PCWrite=0, IF/IDWrite=0 when Hazard=1</code></li>
</ul>
<img src="./image/image-20201024103916398.png" alt="image-20201024103916398" style="zoom:50%;" />
<h1 id="final-review">Final Review</h1>
<h2 id="pipeline">Pipeline</h2>
<p>hazard detection unit and forwarding unit are seperate, such that we should not let hazard detection to control whether and which should forwrding</p>
<img src="./image/image-20201205190723340.png" alt="image-20201205190723340" style="zoom:25%;" />
<ul>
<li>
<p><strong>load-use hazard</strong>. insert bubbles: let control signals in ID/EX registers be zero, EX, MEM, WB stage will do nothing with these zero control signals. Registers value still exist. PC and IF/ID register’s value do not change.  会有EX的data hazard（对nop），但是ineffective，会在下一个MEM hazard的作为下个instruction的值替换</p>
<p>在下一个instruction为sw时，如有data hazard，为避免stall太多，加一个MemSrc来控制data mem要write的data可以直接来自MEM/WB</p>
</li>
<li>
<p><strong>control hazard</strong>, flush the wrong instruction. When determine branch (including address calculation and whether to branch through comparator) in</p>
<ul>
<li><em>ID</em>: IF/ID.Reg.flush</li>
<li><em>EX</em>: IF/ID.Reg.flush + ID.flush</li>
<li><em>MEM:</em> IF/ID.Reg.flush + ID.flush + EX.flush</li>
</ul>
<p>ID.flush 和 EX.flush 是针对control signal而不是整个register都变为0</p>
</li>
<li>
<p><strong>data hazard for branch</strong> 前一个是R type 必须stall 一个，前一个是lw必须stall 两个。再进行forwarding 到ID ex</p>
</li>
<li>
<p><strong>exception</strong></p>
</li>
</ul>
<h2 id="cache">Cache</h2>
<p><strong>All data in a memory must also be present in its lower level</strong></p>
<h3 id="overall">Overall</h3>
<ul>
<li>
<p>Block placement</p>
</li>
<li>
<p>block identification</p>
<ul>
<li>for direct map: 通过block index locate，tag只需要比对一次（index是block index）</li>
<li>for n-way set associative: 通过set index locate，比较所有tag，n次（无block index 只有set index）</li>
<li>for full associative：search all entries(n times) / lookup table (0 time) （无block/set index）</li>
</ul>
</li>
<li>
<p>block replacement</p>
</li>
<li>
<p>write strategy</p>
<p>write through 比起 write back 要cheaper一些，因为check match和write data可以同时进行(saves a step for hit)</p>
<p>以及可以分别被应用于两个的 write allocation on miss</p>
<p>write allocate: allocate cache block on miss by fetching corresponding memory block; update cache block; update memory block</p>
<p>no write allocate: write around(write directly to memory); fetch from memory</p>
<ul>
<li>write through 要找到原有的先写到cache里面，再用新的覆盖掉cache里面的然后写入main memory
<ul>
<li>write buffer： 针对write through的方法，把要写进memory的data放进buffer里面，CPU接着往下走留着buffer完成之后的工作（cache里面的和buffer一起实时更新，main里面的memory在之后由buffer更新）</li>
</ul>
</li>
<li>write back： keep a dirty bit. When need to replace a block with dirty bit == 1 in the cache, write the block back into main memory first
<ul>
<li>write buffer：用于write back则是write into buffer and checking match 同时</li>
</ul>
</li>
</ul>
<img src="./image/allocation.png" alt="截屏2020-12-07 下午3.02.52" style="zoom:30%;" />
</li>
<li>
<p>Sources of misses 3C model: Compulsory | Capacity | Conflict</p>
</li>
</ul>
<h3 id="points">Points</h3>
<ul>
<li>
<p>principle of locality</p>
</li>
<li>
<p>principle of memory access</p>
<ul>
<li>Hit time: time to access a memory, including
<ul>
<li>whether hit/miss</li>
<li>time to pass block to requestor</li>
</ul>
</li>
<li>miss penalty: time to fetch a block from lower level upon a miss, including
<ul>
<li>time to access the block</li>
<li>time to transfer it between levels</li>
<li>time to overwrite the higher level block</li>
<li>time to pass block to requestor</li>
</ul>
</li>
</ul>
</li>
<li>
<p>block size</p>
<ul>
<li>larger block should reduce miss rate (spatial locality)</li>
</ul>
</li>
</ul>
<h4 id="difference-types-of-cache">Difference types of cache</h4>
<p>word offset 是针对一个block里面的word数量决定</p>
<p>并不是改了cache内容就dirty了！是一个block里面的数被sw/sb改掉了</p>
<p>all blocks in a set must be searched (tag search in parallel + extra hardware &amp; access (hit) time )</p>
<h5 id="directed-mapped-cache">directed mapped cache:</h5>
<ul>
<li>byte address = word address (block address(tag + block index) + word offset) + byte offset</li>
<li>cache consists of (valid bit + tag + data)</li>
</ul>
<p>word offset由一个block里面有多少word决定 （但transfer要一个block一起transfer，于是会有hit due to spatial locality）可以用除法来表示舍弃之后几位（除以4就是舍掉最后两位，比如offset）<img src="../../../../Library/Application Support/typora-user-images/截屏2020-12-07 下午2.34.05.png" alt="截屏2020-12-07 下午2.34.05" style="zoom:50%;" /></p>
<p><img src="截屏2020-12-07 下午2.35.56.png" alt="截屏2020-12-07 下午2.35.56" style="zoom:30%;" />、</p>
<h5 id="n-way-set-associative-cache-需要set-index但access一个set中的block必须compare-n次">N-way set associative cache: 需要set index，但access一个set中的block必须compare N次</h5>
<p>byte address = word address (block address(tag + set index) + word offset) + byte offset</p>
<h5 id="full-associative-cache">Full-associative cache</h5>
<p>一个block可以去任意一个cache entry，comparator的数量就是cache size, no index</p>
<ul>
<li>
<p>byte address = word address (block address(tag) + word offset) + byte offset</p>
</li>
<li>
<p>Average Memory Access Time (AMAT): hit time + miss rate * miss penalty</p>
</li>
<li>
<p>reduce miss penalty: early start / critical word first 可能要再看</p>
</li>
<li>
<p>increase associativity decrease miss rate (with diminishing improvement)</p>
</li>
<li>
<p>multiple caches时的</p>
</li>
<li>
<p>LRU 要keep reference bit 对于high associativity: complex and costly hardware</p>
</li>
</ul>
<h2 id="virtual-memory">Virtual Memory</h2>
<ul>
<li>
<p>VM block is called a <strong>page</strong>, VM miss is called a page fault</p>
<ul>
<li>
<p>virtual address some maps to physical address, some to disk address, through address translation</p>
</li>
<li>
<p>physical address usually smaller than virtual address</p>
</li>
<li>
<p>n to one map</p>
</li>
<li>
<p>page fault: page is not present in memory, the page must be fetched from disk</p>
</li>
</ul>
</li>
<li>
<p>virtual address = virtual page number + page offset</p>
<ul>
<li>Processor always provide virtual address</li>
<li>page offset: eg. 12bits -&gt; 4K byte page size</li>
<li>virtual page numebr translated into physical page number, while physical always be larger</li>
<li>virtual page number used as tag when TLB hit &amp; used as page table index when TLB miss to access page table</li>
</ul>
</li>
<li>
<p>Translator - Page Table (for each program)</p>
<ul>
<li>Store all mapping &amp; indexed by virtual page numbers &amp; located in main</li>
<li>page table register</li>
</ul>
</li>
<li>
<p>Translation Look-aside Buffer (TLB) - fast cache of page table within CPU</p>
<ul>
<li>Page table -&gt; TLB == main -&gt; cache</li>
<li>a subset of page table</li>
<li>full associativity: to lower miss rate (because for small TLB, access time not a major concern)</li>
<li>LRU (need to keep a reference bit) or random replacement</li>
<li>physical address will be pointed by both TLB and page table</li>
</ul>
</li>
<li>
<p>TLB miss: cache tag (comparison) + valid bit  |  Page Fault: by page table valid bit (no comparison)</p>
<ul>
<li>TLB miss:
<ul>
<li>TLB is full: ref bit and dirty bit of <strong>replaced entry should be copied back to page table</strong>, but not for valid bit</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Page write: disk write takes millions of time ! 不可以write through</p>
<ul>
<li>page table always write back ! (dirty bit in page table)</li>
<li>write an entire page is more efficient than write a word</li>
</ul>
</li>
<li>
<p>TLB and cache interaction：还要再看</p>
<ul>
<li>for physically addressed cache <img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201208211559726.png" alt="image-20201208211559726" style="zoom:30%;" />
<ul>
<li>Virtual addr -&gt; TLB -&gt; provide physical address to cache (may have longer time because TLB on critical path)</li>
<li><img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201209194505038.png" alt="image-20201209194505038" style="zoom:50%;" /> The cache is physical address, (cache index and tag are both physical )</li>
</ul>
</li>
<li>virtually addressed cache: 只有在cache miss的时候需要将virtual address翻译成physical address
<ul>
<li>complications due to aliasing</li>
<li>This ambiguity would allow one program to write the data without the other program being aware that the data had changed. Completely virtually addressed caches either introduce design limitations on the cache and TLB to reduce aliases or require the operating system, and possibly the user, to take steps to ensure that aliases do not occur.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="overall-framework">Overall Framework</h2>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201209202108111.png" alt="image-20201209202108111" style="zoom:50%;" />
<p><strong>conflict miss</strong> Also called collision miss. A cache miss that occurs in a set­associative or direct­ mapped cache when multiple blocks compete for the same set and that are eliminated in a fully associative cache of the same size. <strong>not exist for full-associativity cache</strong></p>
<p>再看一下书上的判断题/可能的多选题/page table那几个书上的题</p>
<ul>
<li>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲}̲
\begin{aligned…'>\begin{equation}
\begin{aligned}
\rm{\textbf{CPU Time}}&amp;=\rm{CPU\ Clock\ Cycles\ per\ program \times Clock\ Cycle\ Time}\\[2ex]
 &amp;=\frac{\rm{CPU\ Clock\ Cycles}}{\rm{Clock \ Rate}} \\[2ex]
 &amp;= \frac{\rm{IC}\times \rm{CPI}}{\rm{Clock\ Rate}} \\[2ex]
 &amp;= \frac{\rm{Instructions}}{\rm{Programs}} \times \frac{\rm{Clock\ Cycles}}{\rm{Instruction}} \times \frac{\rm{Seconds}}{\rm{Clock\ Cycles}}
\end{aligned}
\end{equation}</p>
</li>
<li>
<p><strong>ISA</strong>: Instruction Set Architecture</p>
</li>
<li>
<p>Instruction count: <strong>IC</strong> (由program, ISA, complier 决定)</p>
</li>
<li>
<p>Clock Cycle per Instruction: <strong>CPI</strong></p>
</li>
<li>
<p>Clock Cycles = IC * CPI</p>
</li>
</ul>
<blockquote>
<p>momorize the equation</p>
<p>GHz = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span></p>
</blockquote>
<h1 id="chapter-2-2">Chapter 2</h1>
<p center> **Operation and Operands ** </p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918202135979.png" alt="image-20200918202135979" style="zoom:50%;" />
<pre><code class="language-bash"># c language 
# need preprocessor 
gcc -E test.c &gt; test.i

gcc -S test.s # obtain test.s
gcc -c test.c # obtain test.o, which is machine code to read $ hexdump text.o
/*or*/
hexdump -C test.c # to show ASCII 
gcc test.o -o test # obtain executable machine code test 
# so gcc could followed by test.c or test.o

</code></pre>
<ul>
<li>Instruction Set
<ul>
<li>RISC: reduced instruction set computer</li>
<li>CISC: complex instruction set computer</li>
</ul>
</li>
</ul>
<p>MIPS Instruction Set</p>
<p>Design Principle</p>
<ol>
<li>Simplicity favors regularity.</li>
<li>Smaller is faster</li>
<li>Make the common case faster</li>
</ol>
<h2 id="register-operands-2">Register Operands</h2>
<p>MIPS architecture has a 32*32-bit register file</p>
<blockquote>
<p>$zero: constant 0 (reg 0, also written as 0)<br>
$at: Assembler Temporary (reg 1, or 1)<br>
$v0, v1: result values (reg’s 2 and 3, or 2 and 3); use value for function result<br>
$a0 – a3: arguments (reg’s 4 – 7, or 4 - 7)<br>
$t0 – t7: temporaries (reg’s 8 – 15, or 8 - 15); can be overwritten by callee<br>
$s0 – s7: saved (reg’s 16 – 23, or 16 - 23); be saved/restored by callee<br>
$t8, t9: temporaries (reg’s 24 and 25, or 24 and 25)<br>
$k0, k1: reserved for OS kernel (reg’s 26 and 27, 26/27)</p>
<p>$gp: global pointer for static data (reg 28, or 28)<br>
$sp: stack pointer (reg 29, or 29)<br>
$fp: frame pointer (reg 30, or 30)<br>
$ra: return address (reg 31, or $31)</p>
</blockquote>
<pre><code class="language-assembly">lw rt, offset(rs)# offset should be 4*(an integer) offset: a 16-bits 2's complement number


## Byte/Halfword Operations R[rt] = Mem[R[rs] + signExtensionOffest] 为32bits与16bits相加##
lb rt, offset(rs) # offset could be any integer (-2 is okey)
lh rt, offset(rs # repeat the sign bit

lbu rt, offset(rs) # for unsigned byte; 
lhu rt, offset(rs) # repeat zero

sb rt, offset(rs) 
sh rt, offset(rs)

</code></pre>
<h2 id="memory-operands-2">Memory Operands</h2>
<ul>
<li>
<p>mainly for composite data (arrays, structures, dynamic data)</p>
</li>
<li>
<p>steps</p>
<ul>
<li><code>lw</code>: from memory into registers</li>
<li>perfrom arithmetic operations with registers</li>
<li><code>sw</code>: from register back to memory</li>
</ul>
</li>
<li>
<p>Byte addressable - each address identifies a 8-bit byte</p>
</li>
<li>
<p>organized in word</p>
</li>
<li>
<p>Big/little Endian: MIPS is big Endian</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918185859922.png" alt="image-20200918185859922" style="zoom:50%;" />
</li>
</ul>
<pre><code class="language-c">g = h + A[8]
</code></pre>
<p>h in $s2, base address of A in $s3</p>
<h3 id="load-word-2">load word</h3>
<p>from the content in register ($s3), the content + offset (32), is the address of the content need to be loaded.</p>
<p>The content in the address ( Reg[$s3]) + offset (32)) is loaded in $t0</p>
<p><code>$t0</code> load in the content in this address. Content: A[8]</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917162604239.png" alt="image-20200917162604239" style="zoom:50%;" />
<h3 id="store-word-2">Store Word</h3>
<pre><code class="language-assembly">lw $t0, 32($s3)
add $t0, $s2, $t0
sw $t0, 48($s3) 
</code></pre>
<p>Store the content in $t0, into the content of the address (content in $s3 + 48)</p>
<p>![image-20200917162852822](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917162852822.png)</p>
<ul>
<li>
<p>difference between <code>lb</code> and <code>lbu</code></p>
<p><code>lb</code>: load byte; R[rt] = SignExt(M[R[rs]+SignExtImm])</p>
<p><code>lbu</code>: load byte unsigned; R[rt] = {24b'0,M[R[rs]+SignExtImm] (7:0)}</p>
</li>
</ul>
<h2 id="immediate-operands-constant-2">Immediate Operands (constant)</h2>
<p><code>sll</code> by i bits = multiply by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span></p>
<p><code>srl</code> by i bits = divides by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>i</mi></msup></mrow><annotation encoding="application/x-tex">2^i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span></span></span></span></span></span></span> (unsigned only)</p>
<h3 id="load-32-bits-constant-2">load 32-bits constant</h3>
<ul>
<li><code>lui rt, constant</code>
<ul>
<li>copies 16-bit constant to left 16 bits of rt</li>
<li>clear right 16-bits of rt to 0</li>
</ul>
</li>
<li><code>ori $t0, $t0, 0x....</code> $t1 = $t2| ZeroExtImm</li>
</ul>
<pre><code class="language-assembly"># load 0x56781234 to register $s3
lui $s3, 0x5678
ori $s3, $s3, 0x1234
</code></pre>
<p>For the number stored in a byte if its value is larger than <strong>(10000000) or(80)hex</strong>. If we want to load its original value to a new register, we need to use <code>lbu</code>. If we use lb at this time, the value stored in the new register will be negative.</p>
<h2 id="iffor-2">If/For</h2>
<p>no <code>blt</code>, <code>bge</code>, <code>ble</code>, <code>bgt</code></p>
<p><code>beq</code>, <code>bne</code> common; combined with <code>slt</code>, <code>slti</code>, <code>sltiu</code></p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918204354042.png" alt="image-20200918204354042" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918204439309.png" alt="image-20200918204439309" style="zoom:33%;" />
<h2 id="bytehalfword-operations-2">Byte/Halfword Operations</h2>
<pre><code class="language-assembly"># i.e. load in byte 0xFA
/*Signed, with sign extension*/
	lb rt, offset(rs)		# offset could be any integer;in rt 0xFFFFFFFA
	lh rt, offset(rs)
/*Unsigned, with zero extension*/
	lbu rt, offset(rs)		# offset could be any integer; in rt 0x000000FA
	lhu rt, offset(rs)
</code></pre>
<p><font color=#CD5C5C>有时候要注意offset是否要乘4，如果array是存储的bytes而不是words，则不需要乘4</font></p>
<h2 id="assembly-language-2">Assembly Language</h2>
<p>Example.c</p>
<pre><code class="language-c">int add_a_and_b(int a, int b) {
   return a + b;
}

int main() {
   return add_a_and_b(2, 3);
}
</code></pre>
<p>转化为汇编语言</p>
<pre><code>$ gcc -S example.c
</code></pre>
<p>**arm! but not mips **</p>
<p>example.s</p>
<pre><code class="language-assembly">_add_a_and_b: # 并不是标准命令
   push   %ebx
   mov    %eax, [%esp+8] 
   mov    %ebx, [%esp+12]
   add    %eax, %ebx 
   pop    %ebx # pop会将ESP寄存器中地址加4
   ret  # 当前函数frame被回收

_main:
   push   3  # push: CPU指令，将运算子放入stack，即3写入main这个frame
   push   2 # push会将ESP寄存器中地址减4
   call   _add_a_and_b # call：调用函数
   add    %esp, 8
   ret
</code></pre>
<p>从<code>_main</code>开始执行，在stack上为main建立一个frame（帧）,stack所指向的地址写入ESP寄存器。数据若要写入main这个frame，则写在ESP寄存器所保存的地址。stack：从高位向地位发展。ESP中地址减去四个字节（int）后，新地址写入ESP</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/2018/bg2018012216.png" alt="bg2018012216" loading="lazy"></figure>
<h1 id="chapter-3-2">Chapter 3</h1>
<p><strong>Function</strong></p>
<p>program stored in memory , instructions represented in binary, like data. <em>Each instruction is stored as a word in PC, so 0:0, 4:100, 8: 1000</em>, all the instruction will be ended with 2’b0.</p>
<h2 id="program-counter-2"><strong>program counter</strong></h2>
<p>(PC) (instruction address register)</p>
<ul>
<li>address of the instruction is sotred in PC</li>
<li>32 bits register</li>
<li>a special register in CPU (not same as the registers in register file)</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917145047483.png" alt="image-20200917145047483" style="zoom:30%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917153557980.png" alt="image-20200917153557980" style="zoom:40%;" />
<h2 id="function-calling-2">function calling</h2>
<blockquote>
<p>Similarly, in the execution of a procedure, the program must follow these six steps:</p>
<ol>
<li>Put parameters in a place where the procedure can access them.</li>
<li>Transfer control to the procedure.</li>
<li>Acquire the storage resources needed for the procedure.</li>
<li>Perform the desired task.</li>
<li>Put the result value in a place where the calling program can access it.</li>
<li>Return control to the point of origin, since a procedure can be called from several points in a program.</li>
</ol>
</blockquote>
<h3 id="function-call-instructions-2">Function call instructions</h3>
<ul>
<li>
<p><em>Function call operation</em>:  jump-and-link instruction <code>jal FunctionLabel</code> (J-type)</p>
<p>An instruction that jumps to an address and simultaneously saves the address of the following instruction in a register ($ra in MIPS).</p>
<ul>
<li>$ra = PC+4 (the address of following instruction)</li>
<li>PC = Addr(function label)</li>
</ul>
</li>
<li>
<p><em>Function return operation</em>: jump register <code>jr $ra</code> (R-type)</p>
<ul>
<li>PC = $ra; Copies $ra to program counter</li>
</ul>
</li>
<li>
<p>return address</p>
<p>A link to the calling site that allows a procedure to return to the proper address;</p>
<p>in MIPS it is stored in register $ra.</p>
</li>
<li>
<p>caller: The program that instigates a procedure and provides the necessary parameter values.</p>
</li>
<li>
<p>Callee: A procedure that executes a series of stored instructions based on parameters provided by the caller and then returns control to the caller.</p>
</li>
<li>
<p><strong>stack pointer</strong> ($sp)</p>
</li>
<li>
<p>pointing to the <strong>top of the stack</strong></p>
<ul>
<li>By mean top, not mean when adding more items, the address of $sp would not become larger, but it should be subtracion.</li>
</ul>
</li>
<li>
<p>frame pointer ($fp)</p>
</li>
</ul>
<p>a frame pointer offers a stable base register within a procedure for local memory-references. as $sp might change</p>
<h3 id="leaf-function-2">leaf function</h3>
<blockquote>
<p>Eg1: see swap</p>
</blockquote>
<p>function that don’t call other functions</p>
<pre><code class="language-assembly">addi $sp, $sp, -12 # create spaces in stack
sw $t1, 8($sp) # store data on stack
sw $t0, 4($sp) # actually, no need to operate on $t0 and $t1
sw $s0, 0($sp)
....

lw $s0, 0($sp) # restore data from stack
lw $t0, 4($sp)
lw $t1, 8($sp)
addi $sp, $sp, 12 # destroy spaces on stack
jr $ra # return from function
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200917215149676.png" alt="image-20200917215149676" style="zoom:40%;" />
<h3 id="non-leaf-funciton-2">Non-leaf funciton</h3>
<blockquote>
<p>Eg2: see sort</p>
</blockquote>
<p>function that calls other functions</p>
<p>For nested call, caller need to save on the stack</p>
<ol>
<li>
<p>its return address</p>
</li>
<li>
<p>any arguments and temporaries needed after the call</p>
</li>
</ol>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200918091228677_副本.png" alt="image-20200918091228677" style="zoom:50%;" />
<pre><code class="language-c">int fact (int n) {
  if (n &lt; 1) return f;
  else return n * fact(n - 1)
}
</code></pre>
<p>argument n in $a0, result in $v0</p>
<pre><code class="language-assembly">fact: 
		addi $sp, $sp, -8
		sw $ra, 4($sp)
		sw $a0, 0($sp)
		slti $t0, $a0, 1
		beq $t0, $zero, L1 # the label tells where to go, such that L1 should have the address 
		addi $v0, $zero, 1
		addi $sp, $sp, 8
		jr $ra
L1: 
		addi $a0, $a0, -1
		jal fact
		lw $a0, 0($sp)
		lw $ra, 4($sp)
		addi $sp, $sp, 8
		mul $v0, $a0, $v0
		jr $ra

</code></pre>
<h2 id="function-calling-convention-2">Function Calling Convention</h2>
<p>do not follow convention not mean syntax error, but highly likely to create error</p>
<p>when to apply</p>
<ul>
<li>
<p>immediatly before the function is called</p>
<ul>
<li>pass arguments to $a0 - $a3 (more arguments on stack, addressable via $fp)</li>
<li>save register that should be saved by caller ( i.e. $a0 - $a3  non-leaf function)</li>
<li><code>jal</code></li>
</ul>
</li>
<li>
<p>in function, but before it starts executing</p>
<ul>
<li>allocate memory of frame’s size (moving $sp downwards)</li>
<li>Save registers that should be saved by the function in the frame, before they are overwritten ($s0-$s7 (if to be used), $fp (if used), ​$ra (non- leaf function))</li>
<li>Establish $fp (if desired), $fp = $sp + frame’s size - 4</li>
</ul>
</li>
<li>
<p>immediatly before the funtion finishes</p>
<ul>
<li>if necessary, place the function result to $v0, $v1</li>
<li>Restore registers saved by the function (pop from frame)</li>
<li>destroy stack frame (by moving $sp upwards)</li>
<li><code>jr $ra</code></li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200920130607592.png" alt="image-20200920130607592" style="zoom:67%;" />
</li>
</ul>
<h2 id="example-2">Example</h2>
<p>When translate from C to assembly language</p>
<blockquote>
<ol>
<li>Allocate registers to program variables.</li>
<li>Produce code for the body of the procedure.</li>
<li>Preserve registers across the procedure invocation.</li>
</ol>
</blockquote>
<ul>
<li><code>swap</code></li>
</ul>
<pre><code class="language-c">void swap(int v[], int k) {
	int temp;
	temp = v[k]; 
  v[k] = v[k+1]; 
  v[k+1] = temp;
}
</code></pre>
<pre><code>1. program argument: `$a0, $a1 -&gt; v, k` 		temporary variable: `$t0 -&gt; temp`
</code></pre>
<ol start="2">
<li>
<pre><code class="language-assembly">/*procedure body*/
swap: sll $t1, $a1, 2 # $t1 = k * 4
      add $t1, $a0, $t1 # t1 = v + k * 4, the address of v[k]
      
      lw $t0, 0($t1) # $t1 (temp) = v[k]; load the content in address 0($t1) to the content oof $t0
      lw $t2, 4($t1) # $t2 = v[k+1];
      
      sw $t2, 0($t1) # v[k] = v[k+1]; store the content in $t2 to thr content in address 0($t1)
      sw $t0, 4($t1) # v[k+1] = temp;
/*procedure return*/
      jr $ra
</code></pre>
</li>
</ol>
<ul>
<li><code>sort</code></li>
</ul>
<pre><code class="language-c">void sort (int v[], int n) {
  int i, j;
  for (i = 0; i &lt; n; i += 1) {
  	for (j = i – 1; j &gt;= 0 &amp;&amp; v[j] &gt; v[j + 1]; j -= 1) { 
      swap(v,j);
  	} 
  }
}
</code></pre>
<p>Problem: <code>sort</code> needs the value in $a0 and $a1, <code>swap</code> need to have the parameters placed in those same registers.</p>
<p>v in $a0, n in $a1, i in $s0, j in $s1</p>
<pre><code class="language-assembly">sort:
		addi $sp, $sp, -20
		sw $ra, 16($sp)
		sw $s3, 12($sp)
		sw $s2, 8($sp)
		sw $s1, 4($sp)
		sw $s0, 0($sp)
		add $s2, $a0, $zero	# $s2 = BA of v
		add $s3, $a1, $zero	# s3 = n
		add $s0, $zero, $zero	# i = 0
for1tst: 
		slt $t0, $s0, $s3
		beq $t0, $zer0, exit1 # when i &gt;= n, exit the first loop
		addi $s1, $s0, -1 # j = i - 1
for2tst:
		slt $t0, $s1, 0
		bne $t0, $zero, exit2 # when j &lt; 0 exit the second loop
		sll $t1, $s1, 2 # $t1 = j*4
		add $t2, $t1, $s2 # t2: the address of v[j]; v + j * 4
		lw $t3, 0($t2) # v[j]
		lw $t4, 4($t2) # v[j + 1]
		sll $t0, $t4, $t3
		beq $t0, $zero, exit2 # v[j] &lt; v[j + 1]
		add $a0, $s2, $zero # prepare for the paramete needed for next function call swap
		add $a1, $s1, $zero
		jal swap
		addi $s1, $s1, -1
		j for2tst
exit2: 
		addi $s0, $s0, 1 #i+=1
		j for1tst
exit1: 
	 lw $s0, 0($sp)
	 lw $s1, 4($sp)
	 lw $s2, 8($sp)
	 lw $s3, 12($sp)
	 lw $ra, 16($sp)
	 addi $sp, $sp, 12
	 jr $ra 							# return to calling routine 
</code></pre>
<ul>
<li><code>fib</code></li>
</ul>
<pre><code class="language-c">int fib(int n) {
  if (n &lt; 3)
    return 1;
  else 
    return fib(n-1) + fib(n-2); 
}
</code></pre>
<pre><code class="language-assembly">fib:
	addi 	$sp, $sp, -12
	sw		$s0, 8($sp)
	sw 		$a0, 4($sp)
	sw		$ra, 0($sp)
	slti	$t0, $a0, 3
	beq		$t0, $zero, else
	# lw		$ra, 0($sp) unnecessary load here 
	# lw		$a0, 4($sp)
	addi	$sp, $sp, 12 
	addi	$v0, $zero, 1
	jr		$ra

else:
	lw		$ra, 0($sp)
	lw		$a0, 4($sp)
	addi 	$a0, $a0, -1
	jal	 	fib

	add	 	$s0, $v0, $zero	# we need $s0 to store the value so adjust the stack for 3 items 
	sw 		$a0, 4($sp)
	sw		$ra, 0($sp)
	addi 	$a0, $a0, -2
	jal 	fib
	addi 	$t1, $v0, 0
	lw		$ra, 0($sp)
	lw		$a0, 4($sp)
	addi	$sp, $sp, 8
	add		$v0, $t1, $t0
	jr 		$ra
</code></pre>
<pre><code class="language-assembly"># VE370 2020FA RC Week 3
# Class exercise: fib
# Author: Li Shi

# Important note: 
#   This program is written in Linux, and executed by
#     1. spim -bare
#     2. (spim) read &quot;fib.s&quot;
#     3. (spim) run
#   You may need to modify this program to execute in PCSpim.

.text

main:
  addi  $a0,  $0,   8
  jal   fib                 # Call fib(8)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $a0,  $v0,  0       # Print fib(8)
  addi  $v0,  $0,   1       
  syscall
  addi  $v0,  $0,   10      # System call 10 (exit)
  syscall                   # Exit

fib:
  addi  $sp,  $sp,  -12     # Allocate the stack frame
  sw    $ra,  8($sp)
  sw    $a0,  4($sp)
  sw    $s0,  0($sp)        # We will use $s0 later
  slti  $t0,  $a0,  3       # Test for n &lt; 3
  beq   $t0,  $0,   elseBlock
  addi  $v0,  $0,   1       # return 1 
  addi  $sp,  $sp,  12 
  jr    $ra
  add   $t0,  $t0,  $0      # Delay

elseBlock:
  addi  $a0,  $a0,  -1
  jal   fib                 # fib(n-1)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $s0,  $v0,  0       # Q: What is $s0 used for?
  addi  $a0,  $a0,  -1
  jal   fib                 # fib(n-2)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  add   $v0,  $v0,  $s0     # return fib(n-1)+fib(n-2)
  lw    $s0,  0($sp)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  lw    $a0,  4($sp)
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  lw    $ra,  8($sp)    
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  addi  $sp,  $sp,  12      # Pop the stack
  add   $t0,  $t0,  $0      # Delay
  add   $t0,  $t0,  $0      # Delay
  jr    $ra
  add   $t0,  $t0,  $0      # Delay

</code></pre>
<h2 id="template-2">Template</h2>
<ul>
<li>if ($s0 &lt; $s1) { ... } else { ... }</li>
</ul>
<pre><code class="language-assembly">      slt $t0, $s0, $s1
      beq $t0, $zero, else 
      ....
      j elseExit ## remember to jump out when finish if 
else: ....
elseExit: 
</code></pre>
<ul>
<li>for ($t0 = 0; $t0 &lt; $a1; $t0++) { ... }</li>
</ul>
<pre><code class="language-assembly">Loop:
		add $t0, $zero, $zero
		slt $t1, $t0, $a1
		beq $t1, $zero, exit
		...
		addi $t0, $t0, 1
		j Loop
exit:
</code></pre>
<h2 id="translation-and-startup-2">Translation and Startup</h2>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919103108277.png" alt="image-20200919103108277" style="zoom:33%;" />
<h3 id="complier-2">Complier</h3>
<p>tansform the C program into an assembly language program (a symbolic form of waht the machine understands)</p>
<h3 id="assembler-2">assembler</h3>
<blockquote>
<p>To produce the binary version of each instruction in the assembly language program, the assembler must determine the addresses corresponding to all labels. Assemblers keep track of labels used in branches and data transfer instructions in a <strong>symbol table</strong>. As you might expect, the table contains pairs of symbols and addresses.</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919104550827.png" alt="image-20200919104550827" style="zoom:33%;" />
<p><strong>producing an object module</strong></p>
<p>Example</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919105156829.png" alt="image-20200919105156829" style="zoom:33%;" />
<p>​			- In the object file:</p>
<blockquote>
<p>the instructions in assembly language just to make the example understandable; in reality, the instructions would be numbers.</p>
</blockquote>
<p>​		<em>Note that the address and symbols that must be updated in the link process is higlighted</em>:</p>
<pre><code>			1. the instructions that refer to the address of procedures $A$ and $B$

			2. the instructions that refers to the data word $X$ and $Y$
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919105719045.png" alt="image-20200919105719045" style="zoom:50%;" />
<h3 id="linker-2">linker</h3>
<p>Also called link editor. A systems program that combines independently assembled machine language programs and resolves all undefined labels into an <strong>executable file</strong>.</p>
<ol>
<li>
<p>merge segments</p>
</li>
<li>
<p>resolve labels (determine their address)</p>
</li>
<li>
<p>patch location-dependent and external reference</p>
</li>
</ol>
<p><strong>example of linked objects</strong></p>
<p>Object is already machine language, but no memory has been traslated (the translator do not know about)</p>
<blockquote>
<p>the text segment starts at address 40 0000hex and the data segment at 1000 0000hex.</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919111236159.png" alt="image-20200919111236159" style="zoom:50%;" />
<blockquote>
<ol>
<li>The jals are easy because they use pseudodirect addressing. The jal at address 40 0004hex gets 40 0100hex (the address of procedure B) in its address field, and the jal at 40 0104hex gets 40 0000hex (the address of procedure A) in its address field.</li>
<li>The load and store addresses are harder because they are relative to a base register. This example uses the global pointer as the base register. Figure 2.13 shows that $gp is initialized to 1000 8000hex. To get the address 1000 0000hex (the address of word X), we place 8000hex in the address field of lw at address 40 0000hex (Because it is 2’s complement). Similarly, we place ­7980hex in the address field of sw at address 40 0100hex to get the address 1000 0020hex (the address of word Y).</li>
<li>also output an object file</li>
</ol>
</blockquote>
<h3 id="loader-2">Loader</h3>
<blockquote>
<ol>
<li>Reads the executable file header to determine size of the text and data segments.</li>
<li>Creates an address space large enough for the text and data.</li>
<li>Copies the instructions and data from the executable file into memory.</li>
<li>Copies the parameters (if any) to the main program onto the stack.</li>
<li>Initializes the machine registers and sets the stack pointer to the first free location. ($sp, $gp, $fp)</li>
<li>Jumps to a start-up routine.
<ul>
<li>copies the parameters into the argument registers  ($a0...) and calls the main routine</li>
<li>When the main routine returns, the start-up routine terminates the program with an exit system call</li>
</ul>
</li>
</ol>
</blockquote>
<p>之前讲了static link， 即before the program is run <em>1. the library routines become part of the executable file 2. it loads all routines in the library that are called anywhere executable</em></p>
<p>so -&gt; <strong>dynamically linked libraries (DLLs)</strong>: Library routines that are linked to a program during execution.</p>
<h3 id="dynamic-linking-2">Dynamic Linking</h3>
<p>dll: dynamic linking library</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200919113501211.png" alt="image-20200919113501211" style="zoom:50%;" />
<h1 id="topic-4-2">Topic 4</h1>
<p>Instructoin coding, how the <strong>assembler and linker</strong> transform into machine code.</p>
<p>MIPS instruction -&gt; 32 bits words, translated into binary information (machine code)</p>
<p>first 6 bits -&gt; opcode always, for all three types. Based on this, CPU now what to do.</p>
<h2 id="r-format-2">R-format</h2>
<p>totally 32 bits, can see from the <strong>reference card</strong> ![image-20200928083358704](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928083358704.png)</p>
<h3 id="instruction-fields-2">Instruction fields</h3>
<p>Here is the meaning of each name of the fields in MIPS instructions:</p>
<ul>
<li><em>op:</em> Basic operation of the instruction, traditionally called the <strong>opcode</strong>.</li>
<li><em>rs:</em> The first register source operand.</li>
<li><em>rt:</em> The second register source operand.</li>
<li><em>rd:</em> The register destination operand. It gets the result of the operation.</li>
<li><em>shamt:</em> Shift amount. (Section 2.6 explains shift instructions and this term; it will not be used until then, and hence the field contains zero in this section.) only use when shift, represents the number we want to shift (0-31)</li>
<li><em>funct:</em> Function. This field, often called the <em>function code,</em> selects the specific variant of the operation in the op field.</li>
</ul>
<blockquote>
<p>add $t0, $s1, $s2</p>
<p>add: 0 (opcode)</p>
<p>rs: $s1 (5 -bits store the memory) 10001</p>
<p>rt: $s2 10010</p>
<p>rd: $t0 (becasue this is the register destination)01000</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084133611.png" alt="image-20200928084133611" style="zoom:33%;" />
<p><code>add</code> and <code>sub</code> have the same opcode, use the different <code>func</code> field to distinguish between these two.</p>
<h2 id="i-format-2">I-format</h2>
<p>i- immediate number</p>
<p>![image-20200928084210292](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084210292.png)</p>
<p><strong>rt: destination now</strong> however it could also be source (determine by read / write operation)</p>
<p>rs: source or base address register</p>
<p>constant / address: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> / offset added to base address in rs</p>
<p>Read: source register  			 Write: destination</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084346097.png" alt="image-20200928084346097" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084559327.png" alt="image-20200928084559327" style="zoom:33%;" />
<ul>
<li></li>
</ul>
<pre><code class="language-assembly">sw	$t0, 4($s0) 	# $s0-&gt;rs / $t0 -&gt; rt
</code></pre>
<p>read from the register both $s0-&gt;rs $t0-&gt;rt. // no destination register needed</p>
<p>relative address = (LOOP-PC-4)/4.  // because relative address should have a 32-bits address, so by calculation, we could use relative address (16 bits)</p>
<ul>
<li></li>
</ul>
<pre><code class="language-assembly">lui		$t0, 255 	# because $t0 is the destination register
</code></pre>
<table>
<thead>
<tr>
<th>opcode</th>
<th>rs</th>
<th>rt</th>
<th>Immediate</th>
</tr>
</thead>
<tbody>
<tr>
<td>001111</td>
<td>00000</td>
<td>01000</td>
<td>0000 0000 1111 1111</td>
</tr>
</tbody>
</table>
<ul>
<li></li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928084836733.png" alt="image-20200928084836733" style="zoom:33%;" />
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201005110337077.png" alt="image-20201005110337077" style="zoom:50%;" />
<h2 id="j-format-2">J-format</h2>
<p>![image-20200928085339660](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928085339660.png)</p>
<p>encode full address in instruction, use 26 bits represent a 32 bits address</p>
<p>leave the first 4 bits of PC untouched.</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928085659606.png" alt="image-20200928085659606" style="zoom:33%;" />
<h2 id="addressing-in-branches-and-jumps-2">Addressing in Branches and Jumps</h2>
<ul>
<li>J-type: 6 bits for operation field and the rest of the bits for the address field.</li>
</ul>
<p><code>j 10000</code> can be assembled into</p>
<table>
<thead>
<tr>
<th style="text-align:center">2</th>
<th style="text-align:center">10000</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">6 bits</td>
<td style="text-align:center">26 bits</td>
</tr>
</tbody>
</table>
<p>the value of the jump opcode is 2 and the jump address is 10000</p>
<ul>
<li>PC-relative addressing</li>
</ul>
<p>a branch instruction would calculate: Program counter = Register + Branch address</p>
<p>for conditional branches: loops and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">if</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> statements</p>
<h2 id="decoding-machine-code-2">Decoding Machine Code</h2>
<ol>
<li>converting hex to binary to find <strong>op fields</strong>, determine the operation</li>
<li></li>
</ol>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200928140704517.png" alt="image-20200928140704517" style="zoom:50%;" />
<ul>
<li>
<p>How to get address</p>
<ul>
<li>immediate addressing
<ul>
<li>I-type <code>addi $s0, $s1, -1</code></li>
</ul>
</li>
<li>register addressing
<ul>
<li>R-type / I-type : all or some operands provided by register IDs directly <code>add $t0, $s0, $s1</code></li>
</ul>
</li>
<li>base addressing
<ul>
<li>I-type: operands provided by using base address of memory location <code>lw $t0, 32($s0)</code></li>
</ul>
</li>
<li>PC-relative addressing
<ul>
<li>Operands relative to PC, used for near branch <em>target address = PC + 4 + offest * 4</em> , <code>beq $s0, $s1, LESS</code></li>
</ul>
</li>
<li>Pseudodirect addressing
<ul>
<li>encode full address in instruction J-type (<code>j</code> and <code>jal</code>) <em>target address = PC[31:28] : address * 4</em></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><em>instructions from memory &amp; data from/into RF/memory</em></p>
  <img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200930114747486.png" alt="image-20200930114747486" style="zoom:33%;" />
<h1 id="t05-2">T05</h1>
<p>Review of Digital Logic</p>
<p>who to control reading  / writing? do not read / write at the same time -&gt; control signal in RF</p>
<ul>
<li>
<p>memory (access memory is slower than access RF, because of the big circuit of memory, need to decode the address)</p>
<ul>
<li>SRAM (Static RAM)</li>
</ul>
<figure data-type="image" tabindex="7"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930130847535.png?lastModify=1601950411" alt="image-20200930130847535" loading="lazy"></figure>
<ul>
<li>DRAM</li>
</ul>
<figure data-type="image" tabindex="8"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930131212504.png?lastModify=1601950411" alt="image-20200930131212504" loading="lazy"></figure>
<p>memory in MIPS</p>
<p>insturction memory: only read afterwards</p>
<p>data memory: only one address for read / write</p>
<figure data-type="image" tabindex="9"><img src="file:///Users/yuxinmiao/Library/Application%20Support/typora-user-images/image-20200930131317240.png?lastModify=1601950411" alt="image-20200930131317240" loading="lazy"></figure>
<p>If need write, write first</p>
</li>
</ul>
<h1 id="t06-2">T06</h1>
<p>Single Cycle Processor Chapter 4.1-4.4</p>
<p>■■ The <strong>memory-reference</strong> instructions load word (lw) and store word (sw)</p>
<p>■■ The <strong>arithmetic-logical</strong> instructions add, sub, AND, OR, and slt</p>
<p>■■ The instructions <strong>branch</strong> equal (beq) and jump (j), which we add last</p>
<p>PC is controled by clock signal</p>
<p>every instruction, needs: send the PC to the memory that contains the code and fetch the instruction from that memory / read one or two registers, using fields of the instruction to select.</p>
<p><em>state element:</em> a memory element, such as a register or a memory</p>
<ul>
<li>clocking methodology: edge-triggered clocking: a clocking scheme in which ass state changes occur on a clock edge. Only state elements can store data value, <strong>any collection of combinational logic must have its inputs come from a set of state elements and its outputs written into a set of state elements</strong>. The inputs are values that were written in a previous clock cycle, while the outputs  are values that can be used in a following clock cycle.</li>
<li>ALUOp &amp; funct -&gt; ALU Control</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007102736810.png" alt="image-20201007102736810" style="zoom:33%;" />
<p>​		Generate a 2-bit ALUOp (by CPI controller). With ALUOp and funct field -&gt; ALU control</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007103211448.png" alt="image-20201007103211448" style="zoom:50%;" />
<blockquote>
<p>​		that is, using multiple levels of decoding -&gt; reduce the size of the main control unit (opcode before)</p>
</blockquote>
<p>The corresponding truth table is as follows, don’t care term all represented with X</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007103747839.png" alt="image-20201007103747839" style="zoom:50%;" />
<ul>
<li>
<p>instruction format</p>
<p><code>opcode</code> bits [31:26] as Op[5:0]</p>
<p>Two register be read <code>rs</code> <code>rt</code> [25:21] and [20:16] (R-type, beq, store)</p>
<p>base register for load and store <code>rs</code> [25:21]</p>
<p>offset [15:0] (beq, load, store)</p>
<p>destination register - load: <code>rt</code> [20:16]</p>
<p>​									- R-type: <code>rd</code> [15:11] -&gt; use a Mux to select</p>
</li>
<li>
<p>usage of seven control lines</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201007105307315.png" alt="image-20201007105307315" style="zoom:50%;" />
</li>
</ul>
<p>For R-type, will not use data memory</p>
<p>lw: read register from register file, ALU calculate the address, read data from data memory, store the data read back to register file</p>
<p>![image-20201013152850305](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201013152850305.png)</p>
<h3 id="clocking-methodology-2">Clocking Methodology</h3>
<p><code>lw</code> load type instruction will need most time (becasuse of read from data)</p>
<p><code>beq</code> only read from register and do some calculation, will not cost more time</p>
<p><em>sigle-cycle processor</em> is not feasible to vary period for differerent instructions</p>
<p>![image-20201016131205087](/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201016131205087.png)</p>
<p>​	clock cycle time for single-cycle processor will be 800ps, regardless of the instructions’ distribution</p>
<p>​	execution time is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>100</mn><mo>∗</mo><mn>800</mn><mi>p</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">100*800ps</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">8</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault">p</span><span class="mord mathdefault">s</span></span></span></span></p>
<p><em>multi-cycle CPU</em> - FSM: each instruction takes multiple cycles to execute</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201016132709964.png" alt="image-20201016132709964" style="zoom:50%;" />
<p>​	still which operation will take the longest time - Instr Fetch: 200ps</p>
<p>​	However, with different distribution, multi-cycle will have different total execution time, some may be worse than single-cycle some may be worse.</p>
<h1 id="t07-2">T07</h1>
<p>Pipelined Processor</p>
<p>divide the big combinational circuit into five small stages, one step per stage per cycle</p>
<ol>
<li>IF:  Instruction fetch</li>
<li>ID:  Instruction decode and register file read</li>
<li>EX:  Execution or address calculation</li>
<li>MEM:  Data memory access</li>
<li>WB:  Write result back to register</li>
</ol>
<p>Single-clock-cycle diagram / multi-clock-cycle diagram</p>
<p>Instruction-level parallism: multiple instructions exectued at the same time</p>
<p>execution time for each instruction does not improve (all need to execute the five stages)</p>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020211402324.png" alt="image-20201020211402324" style="zoom:50%;" />
<h1 id="t08-2">T08</h1>
<p>Data Hazards</p>
<ul>
<li>add stalls: nop instructions</li>
<li>forwarding (bypassing) : use data before it is stored into the register</li>
</ul>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020212106089.png" alt="image-20201020212106089" style="zoom:50%;" />
<p>hazard notation</p>
<p>1a.  EX/MEM.RegisterRd = ID/EX.RegisterRs</p>
<p>1b. EX/MEM.RegisterRd = ID/EX.RegisterRt</p>
<p>2a.  MEM/WB.RegisterRd = ID/EX.RegisterRs</p>
<p>2b. MEM/WB.RegisterRd = ID/EX.RegisterRt</p>
<ol>
<li>
<p>Forwarding in EX stage</p>
<p>we consider  only  the  challenge  of  forwarding  to  an  operation  in  the  EX  stage,  which  may  be  either an ALU operation or an effective address calculation. (instruction tries to use a register in its EX stage that an earlier instruction intends  to write in its WB stage, we actually need the values as inputs to the ALU. )</p>
<pre><code>EX hazard 
if (EX/MEM.RegWrite  // check whether previous a WB to register file needed 
 and (EX/MEM.RegisterRd ≠ 0)  // check whether we need to change the content of $zero
 and (EX/MEM.RegisterRd = ID/EX.RegisterRs)) // check whether the destination register need to use for this ALU
 ForwardA = 10

if (EX/MEM.RegWrite
 and (EX/MEM.RegisterRd ≠ 0)
 and (EX/MEM.RegisterRd = ID/EX.RegisterRt)) ForwardB = 10
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201020214146582.png" alt="image-20201020214146582" style="zoom:50%;" />
<blockquote>
<p>Note  that  the  EX/MEM.RegisterRd  field  is  the  register  destination  for  either  an ALU instruction (which comes from the Rd field of the instruction) or a load  (which comes from the Rt field).</p>
</blockquote>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022085644224.png" alt="image-20201022085644224" style="zoom:50%;" />
<pre><code>MEM HARZARD
if (MEM/WB.RegWrite
	and (MEM/WB.RegisterRd ≠ 0)
	and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd ≠ 0))
			and (EX/MEM.RegisterRd ≠ ID/EX.RegisterRs)
	and (MEM/WB.RegisterRd = ID/EX.RegisterRs)) ForwardA = 01

if (MEM/WB.RegWrite
	and (MEM/WB.RegisterRd ≠ 0)
	and not(EX/MEM.RegWrite and (EX/MEM.RegisterRd ≠ 0))
		and (EX/MEM.RegisterRd ≠ ID/EX.RegisterRt)
	and (MEM/WB.RegisterRd = ID/EX.RegisterRt)) ForwardB = 01
</code></pre>
<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022085828078.png" alt="image-20201022085828078" style="zoom:50%;" />
<p>​	<strong>To select the signed immidiate, add another MUX unit (choose from the output of forward B between signExtend)</strong></p>
<p>​	<img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20201022090130778.png" alt="image-20201022090130778" style="zoom:50%;" /></p>
</li>
</ol>
<h3 id="load-use-hazard-detection-2">Load use hazard detection</h3>
<p><em>If value not computed when needed</em></p>
<p>$2 is needed in <code>and</code> instruction before it is read from data mem</p>
<p><img src="/Users/yuxinmiao/Documents/JI/JI2020Fall/VE370/image/image-20201024104037856.png" alt="image-20201024104037856" loading="lazy">*</p>
<img src="./image/image-20201024103630013.png" alt="image-20201024103630013" style="zoom:50%;" />
<p>​	Add the stall(bubble) by</p>
<ul>
<li>Force control signals in ID/EX register to 0’s (the MUX) (nothing will do with this 0 control signals)</li>
<li>Prevent the update of PC and IF/ID register <code>PCWrite=0, IF/IDWrite=0 when Hazard=1</code></li>
</ul>
<img src="./image/image-20201024103916398.png" alt="image-20201024103916398" style="zoom:50%;" />
<h1 id="final-review-2">Final Review</h1>
<h2 id="pipeline-2">Pipeline</h2>
<p>hazard detection unit and forwarding unit are seperate, such that we should not let hazard detection to control whether and which should forwrding</p>
<img src="./image/image-20201205190723340.png" alt="image-20201205190723340" style="zoom:25%;" />
<ul>
<li>
<p><strong>load-use hazard</strong>. insert bubbles: let control signals in ID/EX registers be zero, EX, MEM, WB stage will do nothing with these zero control signals. Registers value still exist. PC and IF/ID register’s value do not change.  会有EX的data hazard（对nop），但是ineffective，会在下一个MEM hazard的作为下个instruction的值替换</p>
<p>在下一个instruction为sw时，如有data hazard，为避免stall太多，加一个MemSrc来控制data mem要write的data可以直接来自MEM/WB</p>
</li>
<li>
<p><strong>control hazard</strong>, flush the wrong instruction. When determine branch (including address calculation and whether to branch through comparator) in</p>
<ul>
<li><em>ID</em>: IF/ID.Reg.flush</li>
<li><em>EX</em>: IF/ID.Reg.flush + ID.flush</li>
<li><em>MEM:</em> IF/ID.Reg.flush + ID.flush + EX.flush</li>
</ul>
<p>ID.flush 和 EX.flush 是针对control signal而不是整个register都变为0</p>
</li>
<li>
<p><strong>data hazard for branch</strong> 前一个是R type 必须stall 一个，前一个是lw必须stall 两个。再进行forwarding 到ID ex</p>
</li>
<li>
<p><strong>exception</strong></p>
</li>
</ul>
<h2 id="cache-2">Cache</h2>
<p><strong>All data in a memory must also be present in its lower level</strong></p>
<h3 id="overall-2">Overall</h3>
<ul>
<li>
<p>Block placement</p>
</li>
<li>
<p>block identification</p>
<ul>
<li>for direct map: 通过block index locate，tag只需要比对一次（index是block index）</li>
<li>for n-way set associative: 通过set index locate，比较所有tag，n次（无block index 只有set index）</li>
<li>for full associative：search all entries(n times) / lookup table (0 time) （无block/set index）</li>
</ul>
</li>
<li>
<p>block replacement</p>
</li>
<li>
<p>write strategy</p>
<p>write through 比起 write back 要cheaper一些，因为check match和write data可以同时进行(saves a step for hit)</p>
<p>以及可以分别被应用于两个的 write allocation on miss</p>
<p>write allocate: allocate cache block on miss by fetching corresponding memory block; update cache block; update memory block</p>
<p>no write allocate: write around(write directly to memory); fetch from memory</p>
<ul>
<li>write through 要找到原有的先写到cache里面，再用新的覆盖掉cache里面的然后写入main memory
<ul>
<li>write buffer： 针对write through的方法，把要写进memory的data放进buffer里面，CPU接着往下走留着buffer完成之后的工作（cache里面的和buffer一起实时更新，main里面的memory在之后由buffer更新）</li>
</ul>
</li>
<li>write back： keep a dirty bit. When need to replace a block with dirty bit == 1 in the cache, write the block back into main memory first
<ul>
<li>write buffer：用于write back则是write into buffer and checking match 同时</li>
</ul>
</li>
</ul>
<img src="./image/allocation.png" alt="截屏2020-12-07 下午3.02.52" style="zoom:30%;" />
</li>
<li>
<p>Sources of misses 3C model: Compulsory | Capacity | Conflict</p>
</li>
</ul>
<h3 id="points-2">Points</h3>
<ul>
<li>
<p>principle of locality</p>
</li>
<li>
<p>principle of memory access</p>
<ul>
<li>Hit time: time to access a memory, including
<ul>
<li>whether hit/miss</li>
<li>time to pass block to requestor</li>
</ul>
</li>
<li>miss penalty: time to fetch a block from lower level upon a miss, including
<ul>
<li>time to access the block</li>
<li>time to transfer it between levels</li>
<li>time to overwrite the higher level block</li>
<li>time to pass block to requestor</li>
</ul>
</li>
</ul>
</li>
<li>
<p>block size</p>
<ul>
<li>larger block should reduce miss rate (spatial locality)</li>
</ul>
</li>
</ul>
<h4 id="difference-types-of-cache-2">Difference types of cache</h4>
<p>word offset 是针对一个block里面的word数量决定</p>
<p>并不是改了cache内容就dirty了！是一个block里面的数被sw/sb改掉了</p>
<p>all blocks in a set must be searched (tag search in parallel + extra hardware &amp; access (hit) time )</p>
<h5 id="directed-mapped-cache-2">directed mapped cache:</h5>
<ul>
<li>byte address = word address (block address(tag + block index) + word offset) + byte offset</li>
<li>cache consists of (valid bit + tag + data)</li>
</ul>
<p>word offset由一个block里面有多少word决定 （但transfer要一个block一起transfer，于是会有hit due to spatial locality）可以用除法来表示舍弃之后几位（除以4就是舍掉最后两位，比如offset）<img src="../../../../Library/Application Support/typora-user-images/截屏2020-12-07 下午2.34.05.png" alt="截屏2020-12-07 下午2.34.05" style="zoom:50%;" /></p>
<p><img src="截屏2020-12-07 下午2.35.56.png" alt="截屏2020-12-07 下午2.35.56" style="zoom:30%;" />、</p>
<h5 id="n-way-set-associative-cache-需要set-index但access一个set中的block必须compare-n次-2">N-way set associative cache: 需要set index，但access一个set中的block必须compare N次</h5>
<p>byte address = word address (block address(tag + set index) + word offset) + byte offset</p>
<h5 id="full-associative-cache-2">Full-associative cache</h5>
<p>一个block可以去任意一个cache entry，comparator的数量就是cache size, no index</p>
<ul>
<li>
<p>byte address = word address (block address(tag) + word offset) + byte offset</p>
</li>
<li>
<p>Average Memory Access Time (AMAT): hit time + miss rate * miss penalty</p>
</li>
<li>
<p>reduce miss penalty: early start / critical word first 可能要再看</p>
</li>
<li>
<p>increase associativity decrease miss rate (with diminishing improvement)</p>
</li>
<li>
<p>multiple caches时的</p>
</li>
<li>
<p>LRU 要keep reference bit 对于high associativity: complex and costly hardware</p>
</li>
</ul>
<h2 id="virtual-memory-2">Virtual Memory</h2>
<ul>
<li>
<p>VM block is called a <strong>page</strong>, VM miss is called a page fault</p>
<ul>
<li>
<p>virtual address some maps to physical address, some to disk address, through address translation</p>
</li>
<li>
<p>physical address usually smaller than virtual address</p>
</li>
<li>
<p>n to one map</p>
</li>
<li>
<p>page fault: page is not present in memory, the page must be fetched from disk</p>
</li>
</ul>
</li>
<li>
<p>virtual address = virtual page number + page offset</p>
<ul>
<li>Processor always provide virtual address</li>
<li>page offset: eg. 12bits -&gt; 4K byte page size</li>
<li>virtual page numebr translated into physical page number, while physical always be larger</li>
<li>virtual page number used as tag when TLB hit &amp; used as page table index when TLB miss to access page table</li>
</ul>
</li>
<li>
<p>Translator - Page Table (for each program)</p>
<ul>
<li>Store all mapping &amp; indexed by virtual page numbers &amp; located in main</li>
<li>page table register</li>
</ul>
</li>
<li>
<p>Translation Look-aside Buffer (TLB) - fast cache of page table within CPU</p>
<ul>
<li>Page table -&gt; TLB == main -&gt; cache</li>
<li>a subset of page table</li>
<li>full associativity: to lower miss rate (because for small TLB, access time not a major concern)</li>
<li>LRU (need to keep a reference bit) or random replacement</li>
<li>physical address will be pointed by both TLB and page table</li>
</ul>
</li>
<li>
<p>TLB miss: cache tag (comparison) + valid bit  |  Page Fault: by page table valid bit (no comparison)</p>
<ul>
<li>TLB miss:
<ul>
<li>TLB is full: ref bit and dirty bit of <strong>replaced entry should be copied back to page table</strong>, but not for valid bit</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Page write: disk write takes millions of time ! 不可以write through</p>
<ul>
<li>page table always write back ! (dirty bit in page table)</li>
<li>write an entire page is more efficient than write a word</li>
</ul>
</li>
<li>
<p>TLB and cache interaction：还要再看</p>
<ul>
<li>for physically addressed cache <img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201208211559726.png" alt="image-20201208211559726" style="zoom:30%;" />
<ul>
<li>Virtual addr -&gt; TLB -&gt; provide physical address to cache (may have longer time because TLB on critical path)</li>
<li><img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201209194505038.png" alt="image-20201209194505038" style="zoom:50%;" /> The cache is physical address, (cache index and tag are both physical )</li>
</ul>
</li>
<li>virtually addressed cache: 只有在cache miss的时候需要将virtual address翻译成physical address
<ul>
<li>complications due to aliasing</li>
<li>This ambiguity would allow one program to write the data without the other program being aware that the data had changed. Completely virtually addressed caches either introduce design limitations on the cache and TLB to reduce aliases or require the operating system, and possibly the user, to take steps to ensure that aliases do not occur.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="overall-framework-2">Overall Framework</h2>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/370images/image-20201209202108111.png" alt="image-20201209202108111" style="zoom:50%;" />
<p><strong>conflict miss</strong> Also called collision miss. A cache miss that occurs in a set­associative or direct­ mapped cache when multiple blocks compete for the same set and that are eliminated in a fully associative cache of the same size. <strong>not exist for full-associativity cache</strong></p>
<p>再看一下书上的判断题/可能的多选题/page table那几个书上的题</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VE406 Notes]]></title>
        <id>https://yuxin-miao.github.io/post/ve406-notes/</id>
        <link href="https://yuxin-miao.github.io/post/ve406-notes/">
        </link>
        <updated>2020-12-13T22:48:35.000Z</updated>
        <summary type="html"><![CDATA[<p>Course Notes for VE406 (Applied Regression Analysis using R) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Course Notes for VE406 (Applied Regression Analysis using R) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
<!-- more -->
<p>This is the markdown(.md) version note. Another note with R code (.Rmd version) is available <a href="https://github.com/yuxin-miao/VE406_Applied_Linear_Regression_R">here</a>, and pdf version is also included.</p>
<h1 id="linear-regression">Linear regression</h1>
<p>Based on l08</p>
<ol>
<li>
<p>datasize 是否小datasize无法用central limit theorem</p>
</li>
<li>
<p>descriptive analysis: look at the data</p>
</li>
<li>
<p>explorative analysis: density plot of all variables</p>
<blockquote>
<p>binomal for independent variable: two</p>
</blockquote>
</li>
<li>
<p>scatterplot matrix: to see the relationship between dependent and independent variables, which may violate the assumption that (x are independent)<br>
lattice::splom</p>
</li>
<li>
<p>shapiro-wilk test: for small data size: check normality (not y|x, but x)</p>
</li>
<li>
<p>F-test between models</p>
</li>
<li>
<p>with the chosen model: do diagnotics</p>
</li>
<li>
<p>Cook distance: the influential points</p>
</li>
<li>
<p>detect multicollinearity: variance inflation factor (VIF)</p>
</li>
</ol>
<h2 id="attention-points">attention points</h2>
<ul>
<li>lack of data: small data set leads to no strong evidence available</li>
<li>do not use t-test to select variables</li>
<li>select model: compare the full model with the submodel (adj. R squared)</li>
<li>claim the purpose: to <strong>explain</strong> or to <strong>predict</strong></li>
<li>to determine whether a polynomial term is needed: plot standardised residual against each of the regressor</li>
<li>only drop variables after checking the assumption</li>
<li>The SE of the sample slope, the value under <strong>SE</strong> <strong>Coef</strong>. Again, the SE of any statistic is a measure of its accuracy. In this case, the SE of b1 gives, very roughly, the average difference between the sample b1b1and the true population slope β1β1, for random samples of this size (and with these <em>x</em>-values).</li>
<li>shapiro.test: &lt;0.1 -&gt; not normal</li>
</ul>
<ol>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>: a measure of goodness of fit when <strong>all assumptions are satisfied</strong></p>
<p>however, larger value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> do not indicate:</p>
<ul>
<li>assumptions are satisfied</li>
<li>better predictive model</li>
<li>better model across all data set</li>
<li>better model when models have different number of parameters</li>
</ul>
</li>
<li>
<p>adjusted <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>: relative measure to address: <em>when models have different number of parameters</em></p>
<ul>
<li>Can not be interpreted alone</li>
<li>can not used for two models that have different response</li>
</ul>
</li>
</ol>
<h2 id="confused-point">confused point</h2>
<h3 id="cooks-distance">Cook’s distance</h3>
<blockquote>
<p>L08 L10</p>
</blockquote>
<ul>
<li>
<p><strong>outliers</strong>: extreme response values <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i|x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, possible large <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>e</mi><mo>^</mo></mover><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\hat{e}_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.19444em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 应该看vertical distance to the regression line</p>
</li>
<li>
<p><strong>leverage point</strong>: points with extreme <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mo>−</mo><mi>v</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">x_{ij}-values</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8694379999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span></span></span></span> relative to others, (may not have large residuals)， 所以不一定为outlier，看的是横向的是否x与其他的点偏离</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026101841265.png" alt="image-20201026101841265" style="zoom:50%;" />
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026102453480.png" alt="image-20201026102453480" style="zoom:50%;" />
<p>但这并不一定不好，如果该数据样本与得到的预测模型相符合时，（利比亚对其周边国家）这个样本即可进行核实和加强。但差别较大（利比亚与发达国家）时，会使其偏离真实模型。</p>
<p>所以要比较移除/保留leverage point会造成怎样的影响，是否要进行transformation</p>
</li>
<li>
<p><strong>influential point</strong> : a point whose deletion would significantly alter the regression surface.</p>
<ul>
<li>
<p>Quantification methods:</p>
<ol>
<li>
<p>Standardized difference in coefficients</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026102835300.png" alt="image-20201026102835300" style="zoom:50%;" />
</li>
<li>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026102902271.png" alt="image-20201026102902271" style="zoom:50%;" />
</li>
<li>
<p>Cook’s distance: based on the idea of <em>confidence ellipsoid</em></p>
</li>
</ol>
</li>
</ul>
</li>
<li>
<p>Cook's distance：Cook’s D measures how much the model coefficient estimates would change if an observation were to be removed from the data set. higher cook’s D, higher influnce.</p>
<p>Generally accepted rules of thumb are that Cook’s D values above 1.0 indicate influential values, and any values that stick out from the rest might also be influential.</p>
<p>意义依然是将原模型得到的预测值和移除第个样本后的预测值进行比较，从调参经验中我们将设置阈值设为，高于阈值的数据样本需要移除。</p>
</li>
</ul>
<h3 id="interaction">interaction</h3>
<blockquote>
<p>L08</p>
</blockquote>
<p>The interaction term has this meaning or interpretation: consider the relationship between Y and Z. So far in this course, this relationship has been measured by b , the regression coefficient of Y on Z. This coefficient Z is a partial coefficient in that it measures the impact of Z on Y when other variables have been held constant. But suppose <em>the effect of Z on Y depends on the level of another variable, say X</em>. Then, bZ by itself would not be enough to describe the relationship because there is no simple relationship between Y and Z. It depends on the level of X. This is the idea of interaction.</p>
<p>So a <strong>interaction variable</strong> by multiplying, <strong>W = XZ</strong>. Then add the term into model</p>
<ul>
<li>add the interaction term, based on the t-test p_value determine whether the interation term is significant</li>
<li>visualize through interaction plot</li>
</ul>
<h3 id="stability-problem">stability problem</h3>
<blockquote>
<p>L10</p>
</blockquote>
<p>from the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mi>a</mi><mi>r</mi><mo>[</mo><mover accent="true"><msub><mi>β</mi><mn>1</mn></msub><mo>^</mo></mover><mo>]</mo></mrow><annotation encoding="application/x-tex">Var[\hat{\beta_1}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2078799999999998em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">[</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose">]</span></span></span></span>, it has two parts, and the accuracy of our model is determined by</p>
<ul>
<li>the amout of scatter about the true regression line, measured by <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span></span>,</li>
<li>“configuration” of observed <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, that is, the spread of the observed <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
</ul>
<p><strong>Analyze the configuration</strong></p>
<ol>
<li>With one predictor
<ul>
<li>spread out <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; <em>well supported regression line</em>, little change under resampling.</li>
<li>bunched up <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> -&gt; <em>unstable regression line</em>, like a seesaw</li>
</ul>
</li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026093940046.png" alt="image-20201026093940046" style="zoom:50%;" />
<ol start="2">
<li>
<p>two predictor <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">X_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">X_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>the <strong>spread</strong> and <strong>correlation</strong> are both important</p>
<ul>
<li>strong relationship -&gt; tends to have a “knife edge”</li>
<li>uncorrelated/orthogonal -&gt; spread out, support the fitted plane</li>
</ul>
</li>
<li>
<p>in general</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201026094703334.png" alt="image-20201026094703334" style="zoom:50%;" />
</li>
</ol>
<p><strong>Multicollinearity</strong> occurs when the column of the data matrix are almost linearly dependent</p>
<p>https://statisticsbyjim.com/regression/multicollinearity-in-regression-analysis/</p>
<ul>
<li>
<p>happens when</p>
<ol>
<li>One or more predictors have very <strong>little variation</strong> (this predictor almost constant compared to others <em>can’t explain variation in y</em>)</li>
<li>One or more predictors have vey <strong>large mean</strong> (they should have same scale <em>leave residuals small</em>)</li>
<li>Two or more predictors have a <strong>linear relationship</strong></li>
</ol>
<p>The frist two (inessential) could be removed by <strong>standardising the data</strong></p>
<p>The last one (essential) could not be reduced by standardising.</p>
</li>
<li>
<p>How to detect multicollinearity?</p>
<ol>
<li>
<p>general method: looking at the standard error of slope,</p>
</li>
<li>
<p>through variation inflation model (VIF): <em>1: no correlation, 1-5:moderate correlatoin, &gt;5: critical</em></p>
</li>
</ol>
</li>
</ul>
<h3 id="heteroskedasticity">Heteroskedasticity</h3>
<p><em>constant variance is violated</em></p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201027135844740.png" alt="image-20201027135844740" style="zoom:50%;" />
<p>do not care about fit model but care about prediction, this problem could be ignored. because it</p>
<h3 id="studentized-residuals">studentized residuals</h3>
<p>A studentized residual is calculated by dividing the residual by an estimate of its standard deviation. The standard deviation for each residual is computed with the observation excluded. For this reason, studentized residuals are sometimes referred to as <em>externally</em> studentized residuals.</p>
<p>With <strong>weighted least squares</strong>, it is crucial that we use studentized residuals to evaluate the aptness of the model, since these take into account the weights that are used to model the changing variance. The usual residuals don't do this and will maintain the same non-constant variance pattern no matter what weights have been used in the analysis.</p>
<h3 id="vif">VIF</h3>
<p><em>variance inflation factor</em>: This is a measure of how much the standard error of the estimate of the coefficient is inflated due to multicollinearity.</p>
<p>1.0: no collinearity: orthogonal</p>
<p>5-10: might problematic</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&gt;</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">&gt;10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span> : severe. when VIF=100, this would mean that the other predictors explain 99% of the variation in the given predictor.</p>
<h3 id="auxiliary-response">auxiliary response</h3>
<p>When do  <strong>weighted least squares</strong>, to determine the appropriate weights</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201029153130141.png" alt="image-20201029153130141" style="zoom:50%;" />
<blockquote>
<p>https://online.stat.psu.edu/stat501/lesson/13/13.1</p>
</blockquote>
<ul>
<li>Store the residuals and the fitted values from the ordinary least squares (OLS) regression.</li>
<li>Calculate the absolute values of the OLS residuals. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>z</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo>(</mo><mi>a</mi><mi>b</mi><mi>s</mi><mo>(</mo><mi>l</mi><mi>m</mi><mi mathvariant="normal">$</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>i</mi><mi>d</mi><mi>u</mi><mi>a</mi><mi>l</mi><mi>s</mi><mo>)</mo><mo>)</mo><mo>)</mo><mo>]</mo><mo>→</mo><mi>a</mi><mi>u</mi><mi>x</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>a</mi><mi>r</mi><mi>y</mi><mtext> </mtext><mi>r</mi><mi>e</mi><mi>s</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">[z=2*(log(abs(lm\$residuals)))]\rightarrow auxiliary \ response</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord">$</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">u</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault">x</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span></span></span></span></li>
<li>Regress the absolute values of the OLS residuals versus the OLS fitted values and store the fitted values from this regression.<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mi>a</mi><mi>u</mi><mi>x</mi><mi>i</mi><mi>l</mi><mi>i</mi><mi>a</mi><mi>r</mi><mi>y</mi><mtext> </mtext><mi>r</mi><mi>e</mi><mi>g</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[auxiliary \ regression]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mord mathdefault">u</span><span class="mord mathdefault">x</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> These fitted values are <strong>estimates of the error standard deviations</strong>.</li>
<li>Calculate weights equal to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>f</mi><mi>i</mi><mi>t</mi><msup><mi>s</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">1/fits^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>, where &quot;<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>i</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">fits</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span></span></span></span>&quot; are the fitted values from the regression in the last step.</li>
</ul>
<p>We then refit the original regression model but using these weights this time in a weighted least squares (WLS) regression.</p>
<h3 id="log-transformation">Log transformation</h3>
<blockquote>
<p>From midterm exam</p>
</blockquote>
<ul>
<li>
<p>Why do we need to do log transformation for the response <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>?</p>
<ol>
<li>Reduce the variance in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span></li>
<li>after log transformation (if have interaction for different variables), the trend of different parameters might change (one might have more increasing rate after transformation). Without log transformation, the judge might be wrong</li>
</ol>
</li>
<li>
<p>What’s the impact of log transformation?</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
y&amp;=\beta x \\
…'>\begin{align*}
y&amp;=\beta x \\
log(y)&amp; = \beta x\\
\end{align*}
</p>
<p>Then, when say <em>holding every other variables constant, increase x by 1 unit will cause y to increase between <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>w</mi><mi>e</mi><mi>r</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>f</mi><mover accent="true"><mi>β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">lowerboundof\hat{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523199999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mi>p</mi><mi>p</mi><mi>e</mi><mi>r</mi><mi>b</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>d</mi><mi>o</mi><mi>f</mi><mover accent="true"><mi>β</mi><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">upperboundof\hat{\beta}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1523199999999998em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">b</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9578799999999998em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span><span style="top:-3.26344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.16666em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span></em> will no longer be correct.</p>
<p>We need to do the ratio to know how much it will changed after log transformation.</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
log(y_1) - log…'>\begin{align*}
log(y_1) - log(y_2) &amp;=\hat{\beta}(x_1-x_2) = log\left(\frac{y_1}{y_2}\right) \\
\frac{y_1}{y_2} &amp;=exp(\hat{\beta}(x_1-x_2)) 
\end{align*}
</p>
<p>So the <strong>exp</strong> of the difference gives us <strong>not the increase, but the multiply relationship</strong>.</p>
<blockquote>
<p>This will be really important for the nonlinear regression and the regression introduced afterwards.</p>
</blockquote>
</li>
</ul>
<h1 id="non-linear-regression">Non-linear regression</h1>
<p>**Always remember inference might not be appropriate for small data size **</p>
<p><strong>Always remember back transformation!</strong></p>
<h2 id="bootstrapping">Bootstrapping</h2>
<p><em>The bootstrap is a technique in statistics which consists of resampling the observed data in order to create an empirical distribution of some statistic</em></p>
<p>how to answer the question such that (confidence interval of model parameter / how to describe the uncertainty around the fitted values of the model / )</p>
<ol>
<li>Let <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span> denote the number of bootstrap replications—that is, the number of bootstrap samples to be selected</li>
<li>For each bootstrap sample b = 1,... ,r, randomly draw n observations with replacement from among the n sample values, and calculate the bootstrap sample mean,.</li>
<li>From the r bootstrap samples, estimate the standard deviation of the bootstrap means</li>
</ol>
<ul>
<li>在训练集里有放回的重采样等长的数据形成新的数据集并计算相关参数，重复n次得到对参数的估计，计算标准误差</li>
<li>生成Bootstrap Percentile置信区间</li>
<li>适用于独立样本，样本间有相关如时间序列数据可采用block法分组屏蔽掉进行bootstrap</li>
<li>因为存在重复，使用bootstrap建立训练集与预测集会有非独立样本，造成检验集模型方差的低估，去掉重复使模型复杂，不如交叉检验对检验集误差估计的准 （cite https://yufree.github.io/notes/section-11.html)</li>
</ul>
<p>see also: https://www.math.pku.edu.cn/teachers/lidf/docs/statcomp/html/_statcompbook/sim-bootstrap.html</p>
<h2 id="mosaicplot">mosaicplot</h2>
<p>display categorical data</p>
<p>Example:</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201107123626621.png" alt="image-20201107123626621" style="zoom:50%;" />
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201107123412851.png" alt="image-20201107123412851" style="zoom:50%;" />
<p>Interpretation:</p>
<ul>
<li>more survival in 1st class, more female &amp; child survive</li>
<li>…</li>
</ul>
<h2 id="odds-and-odds-ratio">Odds and Odds ratio</h2>
<p><strong>Odds</strong>: describe the ratio of success to ratio of failure.</p>
<p>simple example</p>
<table>
<thead>
<tr>
<th>Gender \ Purchase</th>
<th>Yes</th>
<th>No</th>
</tr>
</thead>
<tbody>
<tr>
<td>Female</td>
<td>106</td>
<td>159</td>
</tr>
<tr>
<td>Male</td>
<td>125</td>
<td>121</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Female group: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mi>d</mi><mi>d</mi><mi>s</mi><mo>=</mo><mfrac><mrow><mn>106</mn><mi mathvariant="normal">/</mi><mo>(</mo><mn>106</mn><mo>+</mo><mn>159</mn><mo>)</mo></mrow><mrow><mn>159</mn><mi mathvariant="normal">/</mi><mo>(</mo><mn>106</mn><mo>+</mo><mn>159</mn><mo>)</mo></mrow></mfrac><mo>=</mo><mn>1.5</mn></mrow><annotation encoding="application/x-tex">Odds=\frac{106/(106+159)}{159/(106+159)}=1.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">d</span><span class="mord mathdefault">d</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">9</span><span class="mord mtight">/</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">6</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">9</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">6</span><span class="mord mtight">/</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">6</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">9</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">5</span></span></span></span></p>
</blockquote>
<p><em>Higher the odds, better is the chance for success.</em> Odds will be in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,+\infty]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span></span></span>.</p>
<p><strong>Odds Ratio:</strong> the ratio of odds. will be in  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,+\infty]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span></span></span>.</p>
<p><em>represents which group has better odds of success</em>.</p>
<blockquote>
<p>Odds Ratio for females = Odds of successful purchase by female / Odds of successful purchase by male = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>106</mn><mi mathvariant="normal">/</mi><mn>159</mn></mrow><mrow><mn>121</mn><mi mathvariant="normal">/</mi><mn>125</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{106/159}{121/125}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">5</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span><span class="mord mtight">6</span><span class="mord mtight">/</span><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
</blockquote>
<h2 id="logistic-regression">Logistic Regression</h2>
<blockquote>
<p>unlike previous continuous response</p>
</blockquote>
<p>use logistic function</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext>Pr</mtext><mo>(</mo><mi>Y</mi><mo>=</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mi>X</mi><mo>=</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>m</mi><mo>(</mo><mi>x</mi><mo separator="true">,</mo><mi>β</mi><mo>)</mo><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><mi>x</mi><mo>)</mo></mrow><mrow><mn>1</mn><mo>+</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>+</mo><msub><mi>β</mi><mn>1</mn></msub><mi>x</mi><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text{Pr}(Y=1|X=x)=m(x,\mathbf{\beta})=\frac{exp(\beta_0+\beta_1x)}{1+exp(\beta_0+\beta_1x)}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Pr</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>odds</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>o</mi><mi>S</mi></msub><mo>=</mo><mfrac><mi>p</mi><mrow><mn>1</mn><mo>−</mo><mi>p</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">o_S=\frac{p}{1-p}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p>as modelling the response were binomially distributed as</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>X</mi><mi>i</mi></msub><mo>∼</mo><mi>B</mi><mi>i</mi><mi>n</mi><mi>o</mi><mi>m</mi><mi>i</mi><mi>a</mi><mi>l</mi><mo>(</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>b</mi><mo>=</mo><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><mn>1</mn><mo>)</mo><mspace linebreak="newline"></mspace><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>:</mo><mi mathvariant="double-struck">E</mi><mo>[</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo>]</mo><mo>=</mo><mi>m</mi><mspace width="1em"/><mi>v</mi><mi>a</mi><mi>r</mi><mi>i</mi><mi>a</mi><mi>n</mi><mi>c</mi><mi>e</mi><mo>:</mo><mtext>Var</mtext><mo>[</mo><mi>Y</mi><mi mathvariant="normal">∣</mi><mi>X</mi><mo>]</mo><mo>=</mo><mi>m</mi><mo>(</mo><mn>1</mn><mo>−</mo><mi>m</mi><mo>)</mo><mspace linebreak="newline"></mspace><mi>G</mi><mi>r</mi><mi>o</mi><mi>u</mi><mi>p</mi><mo>:</mo><msub><mi>S</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>X</mi><mi>i</mi></msub><mo>∼</mo><mi>B</mi><mi>i</mi><mi>n</mi><mi>o</mi><mi>m</mi><mi>i</mi><mi>a</mi><mi>l</mi><mo>(</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>=</mo><mi>p</mi><mi>r</mi><mi>o</mi><mi>b</mi><mo>=</mo><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo>=</mo><msub><mi>n</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">Y_i|X_i \sim Binomial(mean=prob=m_i,size=1) \\
mean: \mathbb{E}[Y|X]=m \quad variance:\text{Var}[Y|X]=m(1-m) \\
Group: S_i|X_i \sim Binomial(mean=prob=m_i,size=n_i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbb">E</span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">c</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">Var</span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>with the success probability depending on the regressors/predictors. The estimate is obtained through maximum likelihood function</p>
<ul>
<li>Transform from linear regression to logistic regression</li>
</ul>
<blockquote>
<p>? Logistic regression but not classification</p>
</blockquote>
<p>​	In linear regression, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> ranges from <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mo>+</mo><mi mathvariant="normal">∞</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">[-\infty,+\infty]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mclose">]</span></span></span></span>. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> now categorical data (0 / 1). So predict 	probability <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">[0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> instead of dinstinct value 0 / 1.</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
Y&amp;=a+b_iX_i, &amp;…'>\begin{align*}
Y&amp;=a+b_iX_i, &amp;-\infty\leq Y\leq \infty,\ &amp;-\infty\leq X_i\leq \infty\\
P&amp;=a+b_iX_i,  &amp;0\leq P\leq 1,\ &amp;-\infty\leq X_i\leq \infty (Probability)\\ 
P/(1-P)&amp;=Odds=a+b_iX_i, &amp;0\leq Odds\leq \infty,\ &amp;-\infty\leq X_i\leq \infty \\ log(Odds)&amp;=a+b_iX_i, &amp;-\infty\leq log(Odds)\leq \infty,\ &amp;-\infty\leq X_i\leq \infty\\
\end{align*}
</p>
<p>​	<strong>we have achieved a regression model, where the output is natural logarithm of the odds , also known as logit</strong>. The base of the logarithm is not important but taking logarithm of odds is.</p>
<p>​	Then the probability of success is</p>
<p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: align* at position 7: \begin{̲a̲l̲i̲g̲n̲*̲}̲
Odds&amp;=e^{a+b_i…'>\begin{align*}
Odds&amp;=e^{a+b_iX_i}=\frac{P}{1-P};&amp;P=\frac{1}{1+e^{-(a+b_iX_i)}} \\
\frac{\hat{P}}{1-\hat{P}}&amp;=exp(\hat{\beta}x)  &amp;\hat{P}=\frac{exp(\hat{\beta}x)}{1+exp(\hat{\beta}x)} \\[2ex]
log(\hat{Odds})&amp;=\hat{\beta}x \\[4ex]
&amp;\text{how to find odds ratio}\\
log(\frac{P_1}{1-P_1})&amp;=\beta x_1 &amp; log(\frac{P_2}{1-P_2})&amp;=\beta x_2 \\[1.5ex]
log(\frac{P_1}{1-P_1})-&amp;log(\frac{P_2}{1-P_2})=\beta (x_1-x_2) \\[1.5ex]
odds \ ratio&amp;= exp(\beta (x_1-x_2)) &amp;\text{the odd of}\ x_1  \text{is} \ exp(\beta (x_1-x_2))\ \text{higher than } x_2

\end{align*}
</p>
<ul>
<li>How to interpret coefficient</li>
</ul>
<p>https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/ For different types</p>
<ol>
<li>Logistic regression with no predictor variables</li>
<li>Logistic regression with a single categorical binary (only 0/1) predictor variables</li>
<li>Logistic regression with a single continuous predictor variable</li>
<li>with multiple predictor variables and no interaction terms
<ul>
<li>estimated coefficient: change in the log odds of being in an honors class (type 1) for a unit increase in the corresponding predictor variable holding the other predictor variables constant at certain value.</li>
<li>exponential coefficient: odds ratio, or the change in odds in the <em>multiplicative scale</em> for a unit increase in the corresponding predictor variable holding other variables at certain value</li>
</ul>
</li>
<li>with an interaction term of two predictor variables
<ul>
<li>attempts to describe how the effect of a predictor variable depends on the level/value of another predictor variable.</li>
<li>could not talk about the effect of one term while holding other terms as constant (because of the interaction term involving this term)</li>
</ul>
</li>
</ol>
<pre><code class="language-pseudocode"># to understand the odds ratio in logistic regression, analyze one output 

## 
## Call:
## glm(formula = admit ~ gre + gpa + rank, family = &quot;binomial&quot;, 
##     data = mydata)
## 
## Deviance Residuals: 
##    Min      1Q  Median      3Q     Max  
## -1.627  -0.866  -0.639   1.149   2.079  
## 
## Coefficients:
##             Estimate Std. Error z value Pr(&gt;|z|)    
## (Intercept) -3.98998    1.13995   -3.50  0.00047 ***
## gre          0.00226    0.00109    2.07  0.03847 *  
## gpa          0.80404    0.33182    2.42  0.01539 *  
## rank2       -0.67544    0.31649   -2.13  0.03283 *  
## rank3       -1.34020    0.34531   -3.88  0.00010 ***
## rank4       -1.55146    0.41783   -3.71  0.00020 ***
## ---
## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
## 
## (Dispersion parameter for binomial family taken to be 1)
## 
##     Null deviance: 499.98  on 399  degrees of freedom
## Residual deviance: 458.52  on 394  degrees of freedom
## AIC: 470.5
## 
## Number of Fisher Scoring iterations: 4


# For every one unit change in gre, the log odds of admission (versus non-admission) increases by 0.002

exp(cbind(OR = coef(mylogit), confint(mylogit)))

##                 OR   2.5 % 97.5 %
## (Intercept) 0.0185 0.00189  0.167
## gre         1.0023 1.00014  1.004
## gpa         2.2345 1.17386  4.324
## rank2       0.5089 0.27229  0.945
## rank3       0.2618 0.13164  0.512
## rank4       0.2119 0.09072  0.471

#  for a one unit increase in gpa, the odds of being admitted to graduate school (versus not being admitted) increase by a factor of 2.23.
</code></pre>
<ul>
<li>The dependent variable in logistic regression follows Bernoulli distribution with unknown probability <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>.</li>
</ul>
<p><strong>Therefore, the logit i.e. log of odds, links the independent variables (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">Xs</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault">s</span></span></span></span>) to the Bernoulli distribution.</strong></p>
<ul>
<li>
<p>likelihood ratio test: LR-test of significance / variable selection</p>
<p>similar to F-test of significance and partial F test <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo></mrow><annotation encoding="application/x-tex">H_0:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span> the reduced model is sufficient</p>
</li>
</ul>
<p><em>however, we donot have methods to check the validity of the model and the appropriateness of using the asymptotic approximation, care with small n</em>!</p>
<ul>
<li>
<p>reduced model deviance</p>
<p>test on <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\beta_2 = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, reduced model do not have <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, full model includes <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, the deviance difference between these two models should have a chi-square distribution with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span>( number of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>β</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\beta_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) degrees of freedom, reject with a large value. (in case that null hypothesis is true and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> is large).</p>
</li>
<li>
<p>Test on individual model coefficients</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>β</mi><mi>j</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_0: \beta_j=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> Wald statistic</p>
</li>
</ul>
<p><code>glm</code> with <code>family=binomial</code> in R.</p>
<ol>
<li><strong>non-grouped</strong>: outcome is provided as a vector of 0/1 or a factor with two levels, with the predictors on the rhs of your formula</li>
<li><strong>grouped data</strong>: there are group of data points that have the same <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi></mrow><annotation encoding="application/x-tex">\mathbf{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span></span></span></span>.
<ul>
<li>give a matrix with two columns of counts for success/failure as the lhs of the formula.</li>
<li>use the <code>weights=</code> argument to indicate how many positive <em>and</em> negative outcomes were observed for each category of the classification table.</li>
</ul>
</li>
</ol>
<p>? if we use<code>ingots.LG = glm(notready/total~heat+soak, family = binomial, data = ingots.df, weights = total)</code>, <code>notready/total</code> is probability, what’s weights for? why not regression</p>
<ul>
<li>
<p>For grouped data,</p>
<ol>
<li>
<p>diagnostics for linearity and independence can be done using <strong>Pearson residuals</strong>.</p>
<p>However, for samll data size, will not be very informative in terms of linearity or independence, but for small data size pearson still can be used to identity outliers, high leverage points and influential points.</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201118100210825.png" alt="image-20201118100210825" style="zoom:50%;" />
</li>
<li>
<p>the deviance of a model plays a similar role that RSS has a multiple linear regression (the larger the deviance, the worse the fit) (zero deviance means no information lost).</p>
<p>the deviance <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> for a model <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> is defined as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>R</mi><mi>d</mi><mn>2</mn></msubsup><mo>=</mo><mn>1</mn><mo>−</mo><mfrac><msub><mi>d</mi><mi>A</mi></msub><msub><mi>d</mi><mn>0</mn></msub></mfrac></mrow><annotation encoding="application/x-tex">R_d^2=1-\frac{d_A}{d_0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.097216em;vertical-align:-0.2831079999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4168920000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831079999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.341513em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8964129999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.410305em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567071428571427em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.14329285714285717em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, where <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>d</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">d_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> is the deviance of the null model (such that the logistic regression only includes the intercept <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>(</mo><mi mathvariant="bold">X</mi><mo separator="true">,</mo><msub><mi>β</mi><mn>0</mn></msub><mo>)</mo><mo>=</mo><mfrac><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>)</mo></mrow><mrow><mn>1</mn><mo>+</mo><mi>e</mi><mi>x</mi><mi>p</mi><mo>(</mo><msub><mi>β</mi><mn>0</mn></msub><mo>)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">m(\mathbf{X},\beta_0)=\frac{exp(\beta_0)}{1+exp(\beta_0)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">X</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.53em;vertical-align:-0.52em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight">p</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05278em;">β</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.05278em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>.</p>
</li>
</ol>
</li>
</ul>
<h2 id="poisson-regression">Poisson Regression</h2>
<blockquote>
<p>unlike previous two type (continous / binary response), response as count</p>
</blockquote>
<p>each individual response</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>X</mi><mi>i</mi></msub><mo>∼</mo><mi>P</mi><mi>o</mi><mi>i</mi><mi>s</mi><mi>s</mi><mi>o</mi><mi>n</mi><mo>(</mo><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo>=</mo><mi>v</mi><mi>a</mi><mi>r</mi><mo>=</mo><msub><mi>m</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">Y_i|X_i \sim Poisson(mean=var=m_i)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">i</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p>with mean depends on the regressors / predictors</p>
<ul>
<li>deviance test for poisson: scaled deviance</li>
</ul>
<p>当响应变量观测的方差比依据泊松分布预测的方差大时，泊松回归可能发生过度离势，而且发生的概率很大。可能发生过度离势的原因有如下几个：</p>
<ul>
<li>遗漏了某个重要的预测变量；</li>
<li>可能因为事件相关，在在泊松分布的观测中,计数中每次事件都被认为是独立发生的。</li>
<li>在纵向数据分析中，重复测量的数据由于内在群聚特性可导致过度离势。</li>
</ul>
<h2 id="generalized-linear-model">Generalized Linear Model</h2>
<p>relax some assumptions of MLR</p>
<p>need: independent <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> and errors</p>
<ul>
<li>Linear function, e.g. can have only a linear predictor in the systematic component</li>
<li>Responses must be independent</li>
</ul>
<blockquote>
<p>Multiple linear regression is a regression with multiple independent variables. What makes the model linear is that there are coefficients on each variable (rather than nonlinear functions of each variable). There are many ways to estimate the value of these coefficients, the most common of which is ordinary least squares. Ordinary least squares (OLS) makes assumptions about the elements of the error term that are not always appropriate for every problem - that they are independent/incorrelated to each other.</p>
<p>Generalized least squares is a way to relax the assumption of independent errors. It begins by estimating the correlation between elements of the error term and using that correlation in a least squares model with more realistic assumptions.</p>
<p>In summary, linearity is about the functional form of the regression equation; generalizability is about the method to estimate coefficients. So they're not mutually exclusive - you can certainly run a generalized multiple regression.</p>
</blockquote>
<p>need to know:</p>
<ul>
<li>exponential family of the underlying distribution</li>
<li>the link function</li>
<li>the linear predictor of the response variable to explotary variables</li>
</ul>
<p>The choice of link is separate from the choice of random component thus we have more flexibility in modeling</p>
<p>https://online.stat.psu.edu/stat504/node/216/</p>
<h2 id="gee">GEE</h2>
<p>quasi-likelihood estimate, parameter estimate is valid even when the covariance matrix is mis-specified.</p>
<p>https://online.stat.psu.edu/stat504/node/180/</p>
<p>specify the appropriate error distribution for the response and the implied link function, and an argument to specify the structure of the working correlation matrix (within-cluster correlation).</p>
<p>the independence is assumed between clusters</p>
<h2 id="non-parametric">Non-parametric</h2>
<p>Only need: linear predictor</p>
<p>The fitted values under a linear smoother is simply gievn by</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo>^</mo></mover><mo>=</mo><mover accent="true"><mi>m</mi><mo>^</mo></mover><mo>(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>)</mo><mo>⇒</mo><mrow><mover accent="true"><mi mathvariant="bold">y</mi><mo>^</mo></mover><mo>=</mo><mi mathvariant="bold">S</mi><mi mathvariant="bold">y</mi></mrow></mrow><annotation encoding="application/x-tex">\hat{y_i}=\hat{m}(x_i) \Rightarrow \mathbf{\hat{y}=Sy}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.90232em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.70788em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span><span style="top:-3.01344em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathbf">S</span><span class="mord mathbf" style="margin-right:0.01597em;">y</span></span></span></span></span></span></p>
<p>where matrix <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">S</mi></mrow><annotation encoding="application/x-tex">\mathbf{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">S</span></span></span></span></span> is known as smoothing matrix</p>
<ul>
<li>a smoother curve does not mean better, especially for prediction, because less variance involved</li>
<li>break the ordered data into segments, for each segment, fit the data with simple or kernel</li>
</ul>
<h3 id="simple-smoothing">Simple Smoothing</h3>
<ol>
<li>binning / bin-smoothing: will have discontinuous at the boundary
<ul>
<li>have a fixed-width bins with varying number of observations</li>
</ul>
</li>
<li>simple moving average (SMA), often used in time-seires
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mi>L</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n-L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span> bins, each has fixed number of observations</li>
<li>results a shift in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> for a large <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> due to only using “past” data</li>
</ul>
</li>
<li>simple central moving averages (SCMA)
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mi>L</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(n-2L)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord mathdefault">L</span><span class="mclose">)</span></span></span></span> bins</li>
<li>avoids the shift in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> by using data on both sides</li>
<li>no estimated value of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">m(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> at two endpoints of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span></li>
</ul>
</li>
<li>running mean smoothing (RMS)</li>
<li>running line smoothing (RLS)</li>
</ol>
<p>the simple smoothers are not smooth, one way to address is to use a <strong>linear spline</strong> rather than a least squares line. Specifically, some called cubic spline. <em>the coefficients are chosen at the observed data only. the result will rely on the data chosen</em></p>
<h3 id="kernel-smoothing-regression">Kernel Smoothing / Regression</h3>
<p>a kernel is a non-negative integrable function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>(</mo><mi>z</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">K(z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span> such that</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mi>K</mi><mo>(</mo><mo>−</mo><mi>z</mi><mo>)</mo><mo separator="true">,</mo><mtext> </mtext><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mi mathvariant="normal">∞</mi></msubsup><mi>K</mi><mo>(</mo><mi>z</mi><mo>)</mo><mi>d</mi><mi>z</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mtext> </mtext><msub><mo><mi>l</mi><mi>i</mi><mi>m</mi></mo><mrow><mi>z</mi><mo>→</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>K</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><msub><mo><mi>l</mi><mi>i</mi><mi>m</mi></mo><mrow><mi>z</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><mi>K</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">K(z)=K(-z),\ \int_{-\infty}^{\infty}K(z)dz=1,\ \mathop{lim}_{z\rightarrow -\infty}K(z)= \mathop{lim}_{z\rightarrow \infty}K(z)=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.384573em;vertical-align:-0.970281em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.970281em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mop"><span class="mop"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">im</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.25833100000000003em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mrel mtight">→</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">im</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>common kernel functions: Rectangular / Triangular / Parabolic / Gaussian</p>
<ul>
<li>bandwidth <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mover accent="true"><mi>m</mi><mo>^</mo></mover><mi>h</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\hat{m}_h(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">m</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;">^</span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li>
</ul>
<h3 id="penalised-regression">Penalised Regression</h3>
<ul>
<li>natural cubic interpolating spline (NCIS)</li>
</ul>
<h2 id="spline-interpolating">Spline Interpolating</h2>
<p>样条插值，给出a set of data points, 要求连续且一阶导连续（曲线光滑），二阶导连续（曲线曲率最小），且二阶导在boundary point为0</p>
<p>Regression splines often give better results than polynomial regression. This is because, unlike polynomials, which must use a high degree polynomial to produce flexible fits, splines introduce flexibility by increasing the number of knots but keep the degree fixed.</p>
<h2 id="generalised-additive-model">Generalised Additive Model</h2>
<p>it is a glm, more than one explotary variables. Like glm use unknown relations. Need a link funtion, relating y to the predictors, through smoothing funciton s</p>
<p>Non-identifiable model</p>
<p>additive model</p>
<p>check the error, which assume zero mean and constant variance</p>
<p>The main difference imho is that glm assume a fixed linear or some other parametric form of the relationship between the dependent variable and the covariates, GAM do not assume a priori any specific form of this relationship, and can be used to reveal and estimate non-linear effects of the covariate on the dependent variable.</p>
<p>Pearson residuals for GLM and GAM should have approximately zero mean and constant variance</p>
<h2 id="pca">PCA</h2>
<p>https://zhuanlan.zhihu.com/p/26305845</p>
<p>主要判断准则如下：</p>
<ol>
<li>根据先验经验和理论知识判断主成分数；</li>
<li>根据要解释变量方差的积累值的阈值来判断需要的主成分数；</li>
<li>通过检查变量间k×k的相关系数矩阵来判断保留的主成分数。</li>
</ol>
<ul>
<li>
<p>Difference in PCA and FA</p>
<p>PCA: a method, FA: an application</p>
<blockquote>
<p>Simplistically, though, factor analysis derives a mathematical model from which factors are estimated, whereas PCA merely decomposes the original data into a set of linear variates</p>
</blockquote>
</li>
<li>
<p>Factor Rotation:</p>
<p>factor loading：大部分variables会对most important factor 有high factor loading，但不方便interpretation</p>
<p>Factor rotation used to discriminate between factors. A factor is a classification axis along which variables could be plotted, factor rotation effectively rotate these factor axes such that variables are loaded maximally on only one factor.</p>
<p>旋转是一系列将成分载荷阵变得更容易解释的数学方法，其作用是尽可能地去除噪声。旋转可以分为正交旋转和斜交旋转，前者使选择的成分保持不相关，后者让它们相关。</p>
</li>
</ul>
<h2 id="factor-analysis">Factor Analysis</h2>
<p>When assume there is some hidden structure from which the observed <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi></mrow><annotation encoding="application/x-tex">\mathbf{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span></span></span></span> are generated, may need other dimension reduction method.</p>
<ul>
<li>
<p><strong>factor model</strong> used to model such hidden structure: The variability in a large number of observed variables could be due to few unobserved factors and unobserved errors</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi mathvariant="bold">X</mi><mrow><mi>n</mi><mo>×</mo><mi>k</mi></mrow></msub><mo>=</mo><msub><mi mathvariant="bold">F</mi><mrow><mi>n</mi><mo>×</mo><mi>k</mi></mrow></msub><msubsup><mi mathvariant="bold">W</mi><mrow><mi>k</mi><mo>×</mo><mi>l</mi></mrow><mi>k</mi></msubsup><mo>+</mo><msub><mi>ϵ</mi><mrow><mi>n</mi><mo>×</mo><mi>k</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\mathbf{X}_{n\times k}=\mathbf{F}_{n\times k}\mathbf{W}^k_{k\times l} + \mathbf{\epsilon}_{n \times k}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.894441em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">X</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.204439em;vertical-align:-0.305331em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">F</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.899108em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">ϵ</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">×</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>$l &lt; k \rightarrow $ Dimension reduction</p>
<ul>
<li>**manifest variables: ** <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi></mrow><annotation encoding="application/x-tex">\mathbf{X}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span></span></span></span> , which is observed, as the original definition</li>
<li>**latent factors: **<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">F</mi></mrow><annotation encoding="application/x-tex">\mathbf{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">F</span></span></span></span></span>, hidden variables</li>
</ul>
<p><strong>Specification:</strong></p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi><mo separator="true">,</mo><mi mathvariant="bold">F</mi></mrow><annotation encoding="application/x-tex">\mathbf{X,F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8805499999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathbf">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathbf">F</span></span></span></span></span> : zero mean + unit variance</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">\mathbf{\epsilon:}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">ϵ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span></span> zero mean</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">F</mi></mrow><annotation encoding="application/x-tex">\mathbf{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">F</span></span></span></span></span> uncorrelated <em>across observations</em> and <em>with other latent factors</em></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">\mathbf{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">ϵ</span></span></span></span></span> uncorrelated <em>across observations</em>, <em>across <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="bold">X</mi><mtext> and </mtext><mi mathvariant="bold">F</mi></mrow><annotation encoding="application/x-tex">\mathbf{X} \text{ and }\mathbf{F}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathbf">X</span></span><span class="mord text"><span class="mord"> and </span></span><span class="mord"><span class="mord mathbf">F</span></span></span></span></span></em></p>
</li>
</ul>
</li>
</ul>
<h2 id="some-points">Some Points</h2>
<ul>
<li>
<p>not nested model, can;t use deviance based test, likelihood test, to select model</p>
<ul>
<li>could use AIC, the smaller, the better</li>
</ul>
</li>
<li>
<p>Use deviance to check goodness of fit. Use scaled deviance for GAM</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201208132136174.png" alt="image-20201208132136174" style="zoom:33%;" />
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/406images/image-20201208132944267.png" alt="image-20201208132944267" style="zoom:33%;" />
</li>
</ul>
<h1 id="summary">Summary</h1>
<h2 id="models-and-assumption-check">Models and Assumption check:</h2>
<p>写出用了什么模型，得到了什么结果，check 了什么assumption，因此又fit了什么，最终得到的model是什么</p>
<h2 id="executive-summary">Executive Summary</h2>
<p>想要test什么，得到了什么结论，estimate结果</p>
<p>要review的问题：</p>
<ul>
<li>为什么要用各个模型</li>
<li>各个模型背后的assumption是否有什么特定的，如何check，assumption violate了怎么办</li>
<li>如何interpret estimate of each model</li>
<li>gamma response with inverse / log link</li>
</ul>
<p>GLM:</p>
<p>need: independent <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span> and errors</p>
<ul>
<li>Linear function, e.g. can have only a linear predictor in the systematic component (non-parametric / GAM当不再linear)</li>
<li>Responses must be independent (GEE 解决这一条的violation: solve the correlation error non-parametrically || GLMM through a probability model)</li>
</ul>
<p><strong>GLM</strong>要求response independence当有repeated response observations violate independence 于是有了<strong>GEE</strong></p>
<p><strong>nonparametric</strong> 与 nonlinear不同：modelling only one independent variable + form of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">m(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> not being assumed or given beforehand. including : smoothing , linear spline instead of least square line. ONLY NEED linear predictor</p>
<p><strong>GAM</strong> do not assume a priori any specific form of this relationship, and can be used to reveal and estimate non-linear effects of the covariate on the dependent variable. The main difference imho is that glm assume a fixed linear or some other parametric form of the relationship between the dependent variable and the covariates,</p>
<p>PCA and FA 是用于polish the exploratory variables</p>
<ul>
<li>
<p>SLR is a special case of MLR, MLR is a special case of GLM, GLM is a special of GAM</p>
</li>
<li>
<p>everything is a trade-off, heavier computitional power for loose condition</p>
</li>
</ul>
<p>LR test</p>
<pre><code class="language-R">credit.all3.LG = glm(default~balance+income+student, family = binomial, data = credit.df)
summary(credit.all3.LG) 
# LR test of significance, similar to F-test
credit.null.LG = glm(default~1, family = binomial, data = credit.df)
LR.test = 2*(logLik(credit.all3.LG)[1] -logLik(credit.null.LG)[1]) 
# compare full with null model, so three beta reduced to zero, degree of freedom should be 3 
1-pchisq(LR.test, 3) 
# significantly strong evidence to reject that the reduced model is adequate

# LR test for reduced, similar to partial F-test
credit.no.income.LG = glm(default~.-income, family = binomial, data=credit.df) 
# must be the submodel (to the model going to be compared)
LR.test = 2*(logLik(credit.all3.LG)[1] -logLik(credit.no.income.LG)[1])

1-pchisq(LR.test, 1) 
# fail to reject, only reduce one model, degree of freedom is 1 

# LR-test 
1-pchisq(bomber.PS$deviance,bomber.PS$df.residual)
# 0.46: large p-value -&gt; no evidence of lack of fit 

# significance 
1-pchisq(bomber.PS$null.deviance,bomber.PS$df.null) 
# 0.0033: small p-value: at least one of the regressors is needed 

# GAM  use scaled deviance to check goodness of fit 

</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> through deviance</p>
<pre><code class="language-R"># R_d^2 is 
1-sim.final.LG$deviance/sim.final.LG$null.deviance
# =0.97, model capture most of the deviation in the date 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VE477 Notes]]></title>
        <id>https://yuxin-miao.github.io/post/ve477-notes/</id>
        <link href="https://yuxin-miao.github.io/post/ve477-notes/">
        </link>
        <updated>2020-12-12T14:33:16.000Z</updated>
        <summary type="html"><![CDATA[<p>Notes for VE477 (Introduction to Algorithms) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Notes for VE477 (Introduction to Algorithms) | FA2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
<!-- more -->
<h2 id="computational-problem">Computational Problem</h2>
<ul>
<li>a computational problem is a question or a set of questions that a computer might be able to solve. (what is a computer?)</li>
<li>study of the solutions to the computational problem composes the field of <em>Algorithms</em></li>
<li><em>computational complexity</em> attempts to classify the algorithm depending on their speed or memory usage.</li>
</ul>
<ol>
<li>decision problem</li>
<li>search problem</li>
<li>counting problem</li>
<li>optimization problem</li>
<li>function problem</li>
</ol>
<h3 id="turing-machine">Turing Machine</h3>
<ul>
<li>a function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>:</mo><msup><mo>∑</mo><mo>∗</mo></msup><mo>→</mo><msup><mo>∑</mo><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">f: \sum^* \rightarrow \sum^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-0.25001em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.828596em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.078606em;vertical-align:-0.25001em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.828596em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span> is said to be <strong>Turing computable</strong> if there exists a Turing machine <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> which returns <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> for any input <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>.</li>
</ul>
<ol>
<li><em>deterministic polynomial algorithm:</em>  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>M</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo><mo>≤</mo><mi>P</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">T_M(x)\leq P(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span> a language, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> decision problem <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span></li>
</ol>
<ul>
<li>The set of the decision problems which could be solved by a deterministic polynomial algorithm defines the <em>class P</em>.</li>
</ul>
<ul>
<li><em>class NP:</em> a decision problem is computable by a non-deterministic polynomial algorithm.
<ul>
<li>be polynomial with the certificate</li>
</ul>
</li>
<li><em>class co-NP</em></li>
<li><em>NP-Complete:</em> NP-Complete is a complexity class which represents the set of all problems <code>X</code> in NP for which it is possible to reduce any other NP problem <code>Y</code> to <code>X</code> in polynomial time.</li>
<li><em>NP-hard:</em> do not have to be in NP, do not have to be decision problem. <em>a problem <code>X</code> is NP-hard, if there is an NP-complete problem <code>Y</code>, such that <code>Y</code> is reducible to <code>X</code> in polynomial time</em>.</li>
</ul>
<p>P问题是在多项式时间内可以被解决的问题，而NP问题是在多项式时间内可以被验证其正确性的问题。 NP困难问题是计算复杂性理论中最重要的复杂性类之一。如果所有NP问题都可以多项式时间归约到某个问题，则称该问题为NP困难。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">NP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> contains all problems in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span><br>
<img src="https://yuxin-miao.github.io/post-images/1663250523702.png" alt="" loading="lazy"></p>
<ul>
<li>
<p>PSPACE completeness</p>
<p><strong>SPACE:</strong> denote the set of all the decision problems which can be solved by a Turing machien in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>s</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(s(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> space for some function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> of the input size <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>. <strong>PSPACE</strong> is defined as</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>S</mi><mi>P</mi><mi>A</mi><mi>C</mi><mi>E</mi><mo>=</mo><msub><mo>∪</mo><mi>k</mi></msub><mi>S</mi><mi>P</mi><mi>A</mi><mi>C</mi><mi>E</mi><mo>(</mo><msup><mi>n</mi><mi>k</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">PSPACE = \cup_{k} SPACE(n^k)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mbin">∪</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<p><strong>PSPACE-complete:</strong> 1. in PSPACE 2. for all <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> in PSPACE, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> can be reduced in polynomial space the to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>S</mi><mi>P</mi><mi>A</mi><mi>C</mi><mi>E</mi><mo>−</mo><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">PSPACE-complete</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span></span></span></span></p>
</li>
</ul>
<p><strong>halting problem:</strong> undecidable. Do not belong to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">NP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span>. <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>P</mi><mo>−</mo><mi>h</mi><mi>a</mi><mi>r</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">NP-hard</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span></span></span></span>. reduce SAT to Halting problem</p>
<ol>
<li>
<p><strong>SAT</strong></p>
<p>boolean satisfiability problem: NP-complete</p>
</li>
<li>
<p><strong>TQBF</strong>: PSPACE-complete and NP-hard</p>
<p>True Quantiffied Boolean Formula: can be solved in exponential time and polynomial space.</p>
<ul>
<li>when quantifier <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span>, the both <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn><mi>o</mi><mi>r</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">x_i=0or1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span></span></span></span> should be evaluted true</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span>, only one of them</li>
</ul>
<p>Then each time recursive call will give at most 2 way, then <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
</li>
<li>
<p><strong>Hilbert’s tenth problem</strong></p>
<p>Given a Diophantine equation, with any number of unkown quantities and with rational integral numerical coefficients, decide whether the equation is solvable in rational numbers (decision problem).</p>
</li>
<li>
<p><strong>3-SAT</strong></p>
<p><em>example of how to proceed to evaluate the complexity class of a given problem</em></p>
<blockquote>
<p>cnf: conjunctive normal form: if a boolean formula is written as the conjunction of disjunctive clauses.</p>
</blockquote>
<p>3-SAT is NP-complete:</p>
<ul>
<li>
<p>3-SAT is in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">NP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> (clearly as it is a particular case of SAT)</p>
</li>
<li>
<p>in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>P</mi><mo>−</mo><mi>c</mi><mi>o</mi><mi>m</mi><mi>p</mi><mi>l</mi><mi>e</mi><mi>t</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">NP-complete</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span></span></span></span> that being able to solve it means being able to solve SAT, the proposed transformation is applicable in polynomial time</p>
<p>Convert a cnf-formula <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> to a 3cnf-formula <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mi mathvariant="normal">’</mi></mrow><annotation encoding="application/x-tex">F’</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord">’</span></span></span></span> (then could transform any instance of SAT into an instance of 3-SAT)</p>
<p>Denote each clause in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>C</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>C</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">C_1, C_2, ...,C_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>
a. For clause has one literal as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, change to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>1</mn></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_1\lor x_1 \lor x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
b. For clause has two literals as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>2</mn></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_1\lor x_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, change to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>1</mn></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_1\lor x_2 \lor x_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
c. For clause has more than three literals as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>2</mn></msub><mo>∨</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∨</mo><msub><mi>x</mi><mi>m</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_1\lor x_2\lor ... \lor x_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, introduce new variable <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">z_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> change to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>x</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>z</mi><mn>1</mn></msub><mo>)</mo><mo>∧</mo><mo>(</mo><mi mathvariant="normal">¬</mi><msub><mi>z</mi><mn>1</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>3</mn></msub><mo>∨</mo><msub><mi>z</mi><mn>2</mn></msub><mo>)</mo><mo>∧</mo><mo>(</mo><mi mathvariant="normal">¬</mi><msub><mi>z</mi><mn>2</mn></msub><mo>∨</mo><msub><mi>x</mi><mn>4</mn></msub><mo>∨</mo><msub><mi>z</mi><mn>3</mn></msub><mo>)</mo><mo>∧</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>∧</mo><mo>(</mo><mi mathvariant="normal">¬</mi><msub><mi>z</mi><mrow><mi>m</mi><mo>−</mo><mn>3</mn></mrow></msub><mo>∨</mo><msub><mi>x</mi><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>∨</mo><msub><mi>x</mi><mi>m</mi></msub><mo>)</mo></mrow><annotation encoding="application/x-tex">(x_1\lor x_2 \lor z_1)\land (\neg z_1\lor x_3 \lor z_2)\land (\neg z_2\lor x_4 \lor z_3)\land ... \land (\neg z_{m-3}\lor x_{m-1} \lor x_m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7055600000000001em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∧</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">¬</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7638910000000001em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∨</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p><em>an example:</em><br>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20201023132044585.png" alt="image-20201023132044585" style="zoom:50%;" /></p>
<p>​	Then we could rewrite it as</p>
<p>​$$<br>
\begin{align*}<br>
&amp;(x_1\lor x_2 \lor z_1)\land (\neg z_1\lor \neg x_3 \lor z_2)\land (\neg z_2\lor x_4 \lor z_3)\land (\neg z_3\lor x_5 \lor\neg x_6)\land \<br>
&amp;(\neg x_1\lor \neg x_2 \lor z_1)\land (\neg z_1\lor x_3 \lor z_2)\land (\neg z_2\lor\neg x_4 \lor z_3)\land (\neg z_3\lor x_5 \lor x_6)\land \<br>
&amp;( x_1\lor \neg x_2 \lor z_1)\land (\neg z_1\lor \neg x_3 \lor z_2)\land (\neg z_2\lor x_4 \lor z_3)\land (\neg z_3\lor x_5 \lor \neg x_6)\land \<br>
&amp;(x_1 \lor \neg x_2 \lor x_1)<br>
\end{align*}</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex">
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p>
</li>
</ul>
</li>
</ol>
<ul>
<li>stirling’s formula <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>!</mo><mo>≈</mo><msqrt><mrow><mn>2</mn><mi>π</mi><mi>n</mi></mrow></msqrt><mo>(</mo><mfrac><mi>n</mi><mi>e</mi></mfrac><msup><mo>)</mo><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">n! \approx \sqrt{2\pi n}(\frac{n}{e} )^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2522199999999999em;vertical-align:-0.345em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.90722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mord mathdefault">n</span></span></span><span style="top:-2.86722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.13278em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>!</mo><mo>∈</mo><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo><mo separator="true">,</mo><mo>⌈</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>⌉</mo><mo>∈</mo><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">logn! \in \Theta(n \cdot logn), \lceil logn\rceil \in \Theta(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⌈</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li></li>
</ul>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200915132328058.png" alt="image-20200915132328058" style="zoom:50%;" />
<p>1+2+4+8+…+2^{log n} <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>≈</mo></mrow><annotation encoding="application/x-tex">\approx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mrel">≈</span></span></span></span> 2n-1. Thus, the time complexity is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>.</p>
<p>Running time is expressed as T(n) for some function T on input size n.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>∈</mo><mi>O</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n)\in O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span> also <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n)= O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
<h3 id="complexity-theory">complexity theory</h3>
<ol>
<li>
<p>RAM model</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200924095457385.png" alt="image-20200924095457385" style="zoom:50%;" />
</li>
</ol>
<p>The complexity of an algorithm is defined by a numerical function</p>
<ol start="2">
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi></mrow><annotation encoding="application/x-tex">\mathcal{O}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span></span></span></span></li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925120901038.png" alt="image-20200925120901038" style="zoom:50%;" />
<p>A sufficient condition of Big-Oh</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925130630096.png" alt="image-20200925130630096" style="zoom:33%;" />
<p><img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925130715821.png" alt="image-20200925130715821" style="zoom:33%;" /><img src="https://yuxin-miao.github.io/post-images/477images//image-20200925130730523.png" alt="image-20200925130730523" loading="lazy"></p>
<blockquote>
<p>？</p>
</blockquote>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925165500558.png" alt="image-20200925165500558" style="zoom:33%;" />
<ol start="3">
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Ω</span></span></span></span></li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925120943159.png" alt="image-20200925120943159" style="zoom:50%;" />
<ol start="4">
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span></li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925121016271.png" alt="image-20200925121016271" style="zoom:50%;" />
<h3 id="solve-recurrence">Solve Recurrence</h3>
<p><strong>Master method:</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>≤</mo><mi>a</mi><mi>T</mi><mo>(</mo><mfrac><mi>n</mi><mi>b</mi></mfrac><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><msup><mi>n</mi><mi>d</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n) \leq aT(\frac{n}{b}) + O(n^d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<ul>
<li>base case: for sufficiently small <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>≤</mo><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">T(n) \leq constant</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span></li>
<li>a = number of recursive calls (positive integer)</li>
<li>b = input size shrinking factor (positive integer)</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mi>d</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: the runtime of merging solutions. d is a real value $\geq $ 0</li>
<li>a, b, d : independent of n</li>
<li><img src="image-20200917083956683.png" alt="image-20200917083956683" loading="lazy">
<ol>
<li>In merge sort, a=2, b=2, d=1</li>
<li>in quick sort, if choose the median as the pivot, a=2,b=2,d=1</li>
<li>in binary search, a=1, b=2, d=0</li>
</ol>
</li>
</ul>
<h2 id="divide-and-conquer-approach">Divide-and-conquer Approach</h2>
<ul>
<li>merge sort</li>
<li>Quick sort</li>
</ul>
<h3 id="counting-inversions">Counting inversions</h3>
<ol>
<li>divide into 2 sets</li>
<li>in each set, recursively count the number of inversions</li>
<li>sort each sort</li>
<li>when merge, as need to compre the number, could get the number</li>
</ol>
<h2 id="sorting">Sorting</h2>
<p>A sorting algorithm that is based on pairwise comparisons mush use <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Omega (NlogN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> operations to sort in the worst case</p>
<p>Reorder array A of size N with consistent comparison function</p>
<ul>
<li>
<p>in place: requires <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> additional memory；不占用额外内存，只利用原来存储待排数据的存储空间进行比较和交换。</p>
<p>​	“ Space usage affects the constant factor, because the memory access takes time. Modern computers are based on memory hierarchy. The top is small cache, but extremely fast. If O(1) additional space, it can be fit inside the cache and then, the program is fast; otherwise, it cannot be fit inside the cache, which needs to read the secondary memory, which takes time. ”</p>
</li>
<li>
<p>Stability: whether the algorithm maintains the relative order of records with equal keys</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Best Case Time</th>
<th>Worst  Case Time</th>
<th>Average Case Time</th>
<th>In Place</th>
<th>Stable</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insertion</td>
<td>O(N) sorted array</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)  逆序array</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Selection</td>
<td>О(n2) comparisons, O(1) Swap</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>Bubble</td>
<td></td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>Merge Sort</td>
<td></td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi mathvariant="normal">⁡</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N log⁡N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">⁡</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>)</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi mathvariant="normal">⁡</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N log⁡N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">⁡</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>)</td>
<td>No</td>
<td>Yes</td>
</tr>
<tr>
<td>Quick  Sort</td>
<td></td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">N^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>)</td>
<td>O(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi mathvariant="normal">⁡</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">N log⁡N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">⁡</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>)</td>
<td>Weakly</td>
<td>No</td>
</tr>
</tbody>
</table>
<h3 id="comparison-sort">Comparison Sort</h3>
<p>Each item is compared against others to determine its order</p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/zhyjc6/My-Pictures/2020/03/20200330143209.png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://www.runoob.com/wp-content/uploads/2019/03/0B319B38-B70E-4118-B897-74EFA7E368F9.png" alt="img" loading="lazy"></figure>
<h4 id="simple-sorts">Simple sorts</h4>
<ol>
<li>insertion sort</li>
<li>selection sort</li>
<li>bubble sort</li>
</ol>
<p>Fast sort: quick sort and merge</p>
<h4 id="quick-sort">Quick Sort</h4>
<p>select a pivot <strong>randomly</strong></p>
<ol>
<li>worst case <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>: 每次都选到了最大/最小的元素</li>
</ol>
<p>出现可能<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mrow><mi>n</mi><mo>!</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{2^{n-1}}{n!}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mclose mtight">!</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> - extremely samll</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925090935239.png" alt="image-20200925090935239" style="zoom:50%;" />
<ol start="2">
<li>On average  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathbb{\theta}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925140748192.png" alt="image-20200925140748192" style="zoom:33%;" />
<p>how to do partition? Not in place: with another array B</p>
<p><strong>in-place partition</strong></p>
<pre><code>1. once select a pivot, swap the pivot with the first element in the array 
2. set two pointer i,j; i points to the second element in the array, i = 1; j points to the last elemtn j = N - 1
3. Then increment i until find A[i] &gt;= pivot
4. decrease j until find A[j] &lt; pivot
5. if i &lt; j : swap A[i] and A[j] the go back to 3.  
6. otherwise swap the first element (the pivot) with A[j]
</code></pre>
<h3 id="non-comparison-sort-distribution-based-sort">Non-comparison Sort / distribution-based sort</h3>
<ul>
<li>each item is put into predifined “bins”, independent of other items; no comparison with other items needed</li>
<li>Counting sort / bucket sort / radix sort</li>
</ul>
<h4 id="counting-sort">Counting sort</h4>
<blockquote>
<p>Assume that the input consists of data in a small range</p>
</blockquote>
<p>给定array，已知其中data range为（0，k） + length of the array <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> N (k and N are both parameters, although known, not treated as constant)</p>
<ol>
<li>allocate a new array <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span> with size k+1</li>
<li>store the number of each number in the original array <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span></li>
<li>Sum all number from <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">count</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>=</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>]</mo><mo>+</mo><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo>]</mo></mrow><annotation encoding="application/x-tex">count[i] = count[i] + count[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></li>
<li>from the end of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span>,  put each element in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>[</mo><mi>n</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">A[n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span></span></span></span> in the new array at the position <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mo>[</mo><mi>A</mi><mo>[</mo><mi>n</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">count[A[n]]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">A</span><span class="mopen">[</span><span class="mord mathdefault">n</span><span class="mclose">]</span><span class="mclose">]</span></span></span></span>, then $count[A[n]] -=1 $</li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200918175945944.png" style="zoom:33%;" />
<h4 id="bucket-sort">Bucket sort</h4>
<blockquote>
<p>Assume that the input is drawn from a uniform distribution, then linear time complexity <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal"> </mi><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex"> \mathcal{O}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"> </span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>could be obtained. (the time complecity is relevant to the input)</p>
</blockquote>
<ol>
<li>set an array as an initially empty bucket</li>
<li>Go over the array, put each item into corresponding bucket</li>
<li>in each bucket, do comparison sort</li>
<li>visit all the buckets in order and put all items back to the original array</li>
</ol>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200918182720630.png" alt="image-20200918182720630" style="zoom:33%;" />
<h4 id="radix-sort">Radix sort</h4>
<blockquote>
<p>比如sort name, 因为姓氏的集中性，not good for it</p>
</blockquote>
<p>each element in the n-element array <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span></span></span></span> has <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> digits, where digit 1 is the lowest-order digit and digit <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span></span></span></span> is the highest order.</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200918184344405.png" alt="image-20200918184344405" style="zoom:33%;" />
<p>In-place and not in-place both merge sort each subarray recursively, the difference is in the <code>merge</code>  function. For the marge sort discussed in the class, $$\leq $$ is used to compare so that it is stable.</p>
<p>In-place merge sort need to shift all the element because no additional memory (like the additional array in slides), so time complexity $$O(n^2)$$ not $$O(nlogn)$$ any more.</p>
<h2 id="lineartime-selection">LinearTime Selection</h2>
<h3 id="randomized-selection-algorithm">Randomized selection algorithm</h3>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925084333747.png" alt="image-20200925084333747" style="zoom:50%;" />
<p><strong>Average</strong> :</p>
<p>Input array size n &amp;&amp; <strong>random pivot choice</strong></p>
<p><em>Rselect is in phase j</em>: current array size is between <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><msup><mo>)</mo><mrow><mi>j</mi><mo>+</mo><mn>1</mn></mrow></msup><mi>n</mi></mrow><annotation encoding="application/x-tex">(\frac{3}{4})^{j+1}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mfrac><mn>3</mn><mn>4</mn></mfrac><msup><mo>)</mo><mi>j</mi></msup><mi>n</mi></mrow><annotation encoding="application/x-tex">(\frac{3}{4})^{j}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">n</span></span></span></span>.</p>
<p><em><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">X_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></em>: the number of recursive calls in phase <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span></p>
<blockquote>
<p>For example, phase 0 is size between [3/4n, n]. Depends on what the pivot you choose, the array may enter a new phase or remain in the current phase</p>
<p>Good pivot: make the left sub-array size is am, i.e. 1\4&lt;a&lt;3\4. Probability: 0.5. 因为只要在old array中间50%的位置取即可获得</p>
</blockquote>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925093853343.png" alt="20200925093853343.png" style="zoom:33%;" />
<p>E[<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">X_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>]≤ Expected number of times you need to get a good pivot, p=0.5, == flip coin</p>
<blockquote>
<p>小于：因为即使无good pivot也可能进入new phase</p>
</blockquote>
<p>N: the number of chosen needed to get a good pivot. P[N=k] = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msup><mn>2</mn><mi>k</mi></msup></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2^k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2025279999999998em;vertical-align:-0.3574199999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.64258em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3574199999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>;  E[N]=2.</p>
<p>E[<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">X_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>] &lt;= E[N] = 2</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925095103847.png" alt="image-20200925095103847" style="zoom:33%;" />
<blockquote>
<p>第一层循环中将pivot与n个元素进行比较，时间为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">cn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span></span></span></span>.: 第一步时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>c</mi><mi>n</mi><mo>+</mo><mi>T</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n)=cn+T(n/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p>
<p>相似的，在递归过程中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>)</mo><mo>=</mo><mi>c</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>)</mo><mo>+</mo><mi>T</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>)</mo><mo separator="true">;</mo><mtext> </mtext><mi>T</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>)</mo><mo>=</mo><mi>c</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>)</mo><mo>+</mo><mi>T</mi><mo>(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>8</mn><mo>)</mo><mo>…</mo><mtext> </mtext><mi>T</mi><mo>(</mo><mn>2</mn><mo>)</mo><mo>=</mo><mn>2</mn><mo>∗</mo><mi>c</mi><mo>+</mo><mi>T</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo separator="true">;</mo><mtext> </mtext><mi>T</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mn>1</mn><mo>∗</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">T(n/2)=c(n/2) + T(n/4); \ T(n/4)=c(n/4) + T(n/8)…\ T(2) = 2*c+T(1); \ T(1)=1*c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></p>
<p>则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>c</mi><mo>(</mo><mi>n</mi><mo>+</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo>+</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>4</mn><mo>+</mo><mo>…</mo><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>)</mo><mo>=</mo><mn>2</mn><mi>n</mi><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n) = c(n+n/2+n/4+…+2+1) = 2n = O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>空间复杂度：无额外的空间，inplace <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
</blockquote>
<p>The runtime depends on the input pivot</p>
<p>When i = n/2 ,the <strong>worst</strong> case runtime is  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{\Theta}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Θ</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, such that example array 1,2,3,4,5,6,7, choose pivot sequence 1,2,3,7,6,5,4 then comparison time:  c(n-1 + n-2 + … + n/2 + … 1). However, if choose 1,2,3,4,5,6,7, only c(n-1 + n-2 + … + n/2 )</p>
<p><strong>Best:</strong></p>
<p>Best case happens when your random selection of pivot directly gives you the i-th smallest item (i.e., a pivot with index as i). However, the pivot index can only be known after the partition. Thus, the runtime is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{\Theta}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">Θ</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>.</p>
<h3 id="deterministic-selection-algorithm">Deterministic selection algorithm</h3>
<p>Idea: use “median of medians”</p>
<p><strong>ChoosePivot(A, n)</strong></p>
<ul>
<li>
<p>A subroutine called by the deterministic selection algorithm</p>
</li>
<li>
<p>Steps</p>
</li>
</ul>
<p>​	1.Break A into n/5 groups of size 5 each</p>
<p>​	2.Sort each group (e.g., use insertion sort)</p>
<p>​	3.Copy n/5 medians into new array C</p>
<p>​	4.Recursively compute median of C</p>
<p>		By calling the deterministic selection algorithm!</p>
<p>​	5.Return the median of C as pivot</p>
<p><strong>Dselect</strong></p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925095542348.png" alt="image-20200925095542348" style="zoom:70%;" />
<p>Intpu array size n; Runs on <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> time</p>
<p>but not in-place: need an additional array of 5/n medians</p>
<ul>
<li>
<p>对于长度为5的array排序，时间为constant，</p>
</li>
<li>
<p>why size &lt;= 0.7n</p>
</li>
<li>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200925102033806.png" alt="image-20200925102033806" style="zoom:33%;" />
</li>
</ul>
<p>于是可以看出在图中T(?)处的size不会大于0.7n</p>
<p>因此对于整个dselect来说，</p>
<p>Hope: there is a constant a (independent of n) such that T(n)≤an for all n&gt;1</p>
<p>​		Then T(n)=O(n)</p>
<p>We choose a=10c, so to prove -&gt;</p>
<p>Proof by induction:</p>
<ul>
<li>
<p>base case: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>≤</mo><mn>10</mn><mi>c</mi></mrow><annotation encoding="application/x-tex">T(1) \leq 10c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault">c</span></span></span></span></p>
</li>
<li>
<p>inductive step: inductive hypothesis <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>k</mi><mo>)</mo><mo>≤</mo><mn>10</mn><mi>c</mi><mi>k</mi><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>k</mi><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">T(k) \leq 10ck, \forall\ k&lt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span></p>
<p>​	Then prove it also true for <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> : <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>≤</mo><mi>c</mi><mi>n</mi><mo>+</mo><mi>T</mi><mo>(</mo><mfrac><mn>5</mn><mi>n</mi></mfrac><mo>)</mo><mo>+</mo><mi>T</mi><mo>(</mo><mfrac><mrow><mn>7</mn><mi>n</mi></mrow><mn>10</mn></mfrac><mo>)</mo><mo>≤</mo><mi>c</mi><mi>n</mi><mo>+</mo><mn>2</mn><mi>c</mi><mi>n</mi><mo>+</mo><mn>7</mn><mi>c</mi><mi>n</mi><mo>=</mo><mn>10</mn><mi>c</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">T(n) \leq cn+T(\frac{5}{n}) + T(\frac{7n}{10}) \leq cn+2cn+7cn = 10cn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault">c</span><span class="mord mathdefault">n</span></span></span></span></p>
</li>
</ul>
<h2 id="dynamic-programming">Dynamic Programming</h2>
<p>idea behind DP:</p>
<ul>
<li>break a complex problem into simpler subproblems</li>
<li>store the result of the overlapping subproblems</li>
<li>do not recompute the same information again and again</li>
<li>do not waste memory because of recursion</li>
</ul>
<p><em>saves both time and space</em></p>
<ul>
<li>simple idea dramatically improving space-time complexity</li>
<li>cover all the possibilities at the subproblem level</li>
<li>efficient as long as the number of subproblems remains polynomial</li>
</ul>
<p>eg: fibnonacci number naive way: do recursion</p>
<ol>
<li><strong>Memorized DP</strong>: recursion + memorization</li>
</ol>
<p>​	**time = #of sub problems <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>⋅</mo></mrow><annotation encoding="application/x-tex">\cdot</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord">⋅</span></span></span></span> time/subproblem **</p>
<pre><code class="language-pseudocode">mem={}
fib(n):
	if n in mem: return mem[n]
	else:
		if n &lt;= 2: f = 1
		else: f = fib(n-1) + fib(n-2)
		mem[n] = f
		return f
// # of subproblem:n &amp; time/subproblem is \Theta(1)
</code></pre>
<ul>
<li>fib(k) only recurses when it is first called</li>
<li>only n nonmemorized calls: k=n, n-1, … 1</li>
<li>memorized call free (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> time)</li>
<li>could ignore recursion, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> time per call</li>
</ul>
<p>https://www.zhihu.com/question/23995189</p>
<ol start="2">
<li>
<p><strong>Bottom-up DP</strong></p>
<pre><code class="language-pseudocode">fib = {}
for k in [1,2, ...,n]: # n loops, each call is \Theta(1)
		if k &lt;= 2: f = 1
		else: f = fib(n-1) + fib(n-2)
		fib[k] = f
return fib[n]
// same computation as do not need to count for recursion but save space 
</code></pre>
</li>
</ol>
<p><strong>intro</strong></p>
<p>​	用尽量少的1，5，11凑出15；贪心策略<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>15</mn><mo>=</mo><mn>1</mn><mo>∗</mo><mn>11</mn><mo>+</mo><mn>4</mn><mo>∗</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">15 = 1 * 11 + 4 *1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>, 五张。</p>
<p>​	正确的为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>15</mn><mo>=</mo><mn>3</mn><mo>∗</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">15 = 3 * 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>， 三张。 贪心策略为尽量使之后面对的w更少，只考虑眼前情况</p>
<p>​	用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 表示凑出n所需要的最少数量。与1，5，11各用了多少无关。</p>
<p>​	Cost = f(4) + 11 / f(10) + 5 / f(14) + 1 -&gt; $f(n) = min{ f(n-1),f(n-5),f(n-11)} + 1 $</p>
<p>​	以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 复杂度解决</p>
<ul>
<li>
<p>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解</p>
</li>
<li>
<p>Definitions: (DP 需要满足的前提)</p>
<ul>
<li>无后效性：确定f(n)后，如何凑出f(n)即无关</li>
<li>最优子结构: f(n)即为小问题的<strong>最优解</strong>， 因此可以得出大问题的<strong>最优解</strong></li>
</ul>
<p>DP: 枚举有可能成为答案的解，自带剪枝 - 尽量缩小可能解空间</p>
</li>
</ul>
<h3 id="knapsack-problem">knapsack problem</h3>
<h3 id="subset-sum-problem">subset sum problem</h3>
<p>time complexity <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>N</mi><mo>∗</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(N*sum)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mclose">)</span></span></span></span></p>
<ul>
<li>Use a boolean subset[i][j] to denote if there is a subset of sum j with element at index <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> as the last element.</li>
</ul>
<pre><code class="language-pseudocode">subset size: (A.size() + 1) * (target + 1)
subset[i][j] = True
## sum of a subset with the i-1 th element as the last element, equal to j

if (A[i] &gt; j)
	subset[i][j] = subset[i - 1][j]  // copy the answer for previous cases
else 
	subset[i][j] = subset[i - 1][j] OR subset[i - 1][sum - A[i]]
	// if any previous states have already experinced the sum=j OR 
	// OR any previous state experinced a value 'j - A[i]'
</code></pre>
<h3 id="shortest-path">Shortest path</h3>
<blockquote>
<p>Implementation:  dij &amp; bellmanford in VE477 lab5 (lab4: fib heap)</p>
</blockquote>
<p><em>shortest path in weighted graph:</em> Given a connected, simple, weighted graph, and two vertices <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>, find the shortest path that joins <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> to <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>.</p>
<ul>
<li>Egdes only have positive weights</li>
<li>Edges have positive and negative egdes</li>
</ul>
<ol>
<li>Dijkastrs’s algorithm: only for solving the case 1, could not deal with negative weights. (no DP involved)</li>
<li>Bellman-Ford: take advantage of DP</li>
</ol>
<p>Subproblem dependency should be acyclic</p>
<h3 id="string">String</h3>
<p>when subproblem for strings: (all polynomial)</p>
<ul>
<li>Suffixes <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>i</mi><mo>:</mo><mo>]</mo><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">x[i:], \forall i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span>	<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li>prefixes <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>[</mo><mo>:</mo><mi>i</mi><mo separator="true">,</mo><mo>]</mo><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">x[:i,], \forall i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mord mathdefault">i</span></span></span></span>    <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li>substrings <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>i</mi><mo>:</mo><mi>j</mi><mo>]</mo><mo separator="true">,</mo><mi mathvariant="normal">∀</mi><mtext> </mtext><mi>i</mi><mo>≤</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">x[i:j], \forall\ i\leq j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∀</span><span class="mspace"> </span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>    <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ul>
<ol>
<li>
<p>Edit Distance:</p>
<p>given two string <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>, the cheapest possible sequence of character edits to turn <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>→</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">x\rightarrow y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>.</p>
<p>​	ALLOW:</p>
<ul>
<li>Insert <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></li>
<li>Delete <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></li>
<li>replace <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span> with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>c</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">c&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></li>
</ul>
<p><em>SUBPROBLEM</em>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>[</mo><mi>i</mi><mo>:</mo><mo>]</mo><mi mathvariant="normal">&amp;</mi><mi>y</mi><mo>[</mo><mi>j</mi><mo>:</mo><mo>]</mo><mtext> </mtext><mi mathvariant="normal">∀</mi><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><annotation encoding="application/x-tex">x[i:]\&amp;y[j:]\ \forall i,j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span><span class="mord">&amp;</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">]</span><span class="mspace"> </span><span class="mord">∀</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span> then  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(|x|\cdot|y|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></p>
<p><em>GUESS:</em> one of three allowed possibilities</p>
<p><em>RECURRENCE:</em> DP(i, j) = min{ <em>(cost of repalce x[i]-&gt;y[j] + DP(i+1, j+1)</em> , <em>cost of insert y[j] + DP(i, j+1)</em>, <em>cost of delete x[i] + DP(i+1, j)</em>}</p>
<p><em>TOPO ORDER:</em> i: |x| -&gt; 0</p>
<p>​							j: |y| -&gt;0</p>
<p><em>DP</em>(<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \O at position 12: \emptyset, \̲O̲'>\emptyset, \O</span>)</p>
<p>Time comlexity: subproblem <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>. Total: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi mathvariant="normal">∣</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>⋅</mo><mi mathvariant="normal">∣</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(|x|\cdot|y|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></p>
</li>
</ol>
<p>longest common sequence: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">HELLO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">L</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span> for these two words</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>:</mo><mi>H</mi><mi>I</mi><mi>E</mi><mi>R</mi><mi>O</mi><mi>G</mi><mi>L</mi><mi>Y</mi><mi>P</mi><mi>H</mi><mi>O</mi><mi>L</mi><mi>O</mi><mi>G</mi><mi>Y</mi></mrow><annotation encoding="application/x-tex">x: HIEROGLYPHOLOGY</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">G</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span></span></span></span></p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>:</mo><mi>M</mi><mi>I</mi><mi>C</mi><mi>H</mi><mi>A</mi><mi>E</mi><mi>L</mi><mi>A</mi><mi>N</mi><mi>G</mi><mi>E</mi><mi>L</mi><mi>O</mi></mrow><annotation encoding="application/x-tex">y: MICHAELANGELO</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">L</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">L</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span></p>
<h2 id="union-find">Union-Find</h2>
<p>A <em><a href="http://en.wikipedia.org/wiki/Disjoint-set_data_structure">disjoint-set data structure</a></em> is a data structure that keeps track of a set of elements partitioned into a number of disjoint (non-overlapping) subsets. A <a href="http://en.wikipedia.org/wiki/Disjoint-set_data_structure"><em>union-find algorithm</em></a> is an algorithm that performs two useful operations on such a data structure:</p>
<p>并查集是一种树型的数据结构，用于处理一些不交集的合并及查询问题; 不能将在同一组的元素拆开</p>
<p>two operations</p>
<ul>
<li><code>Find(v)</code>: find the root of the tree for vertex <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span></li>
<li><code>Union(v, w)</code>: link the root of the tree containg vertex <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> to the root of tree containing vertex <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></li>
</ul>
<p>两处优化</p>
<ul>
<li>When <code>Find</code>, update all the nodes along the path (all link them to the root directly)</li>
<li>When <code>Union</code>, set the root with higher depth as the parent of another root (minimize the depth of the tree)</li>
</ul>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200927102034381.png" alt="image-20200927102034381" style="zoom:33%;" />
<p><strong>Complexity</strong></p>
<ul>
<li>
<p>Lemma <img src="/Users/yuxinmiao/Library/Application Support/typora-user-images/image-20200927102643009.png" alt="image-20200927102643009" style="zoom:50%;" /></p>
</li>
<li>
<p><em>iterated logarithm</em> function <img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200927103159560.png" alt="image-20200927103159560" style="zoom:33%;" /></p>
<p>such that, the iterated algorithm of n is the number of time that the function log need to be applied to obtain a number smaller than  2</p>
</li>
<li>
<p>The cost for one <code>find</code> operation is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(logn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>because for each <code>find</code>, the path will be compressed,</p>
</li>
<li>
<p>The amortized time for a sequence of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> <code>GenSet</code> <code>Union</code> <code>Find</code> operations, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> of which are <code>GenSet</code> can be performed in time <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>m</mi><mi>α</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(m\alpha(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>.</p>
</li>
</ul>
<p>The complexity of Union-Find structure is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Ω</mi><mo>(</mo><mi>α</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding="application/x-tex">\Omega(\alpha(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></p>
<h2 id="ackermans-function">Ackerman’s function</h2>
<p><strong>inverse Ackerman’s function</strong></p>
<h2 id="mst">MST</h2>
<blockquote>
<p>Implement: VE477 lab2  (Minimum Spnning Tree)</p>
</blockquote>
<ol>
<li>Definitions</li>
</ol>
<ul>
<li><strong>tree</strong>: acyclic, connected undirected graph; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|E| = |V| - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li>
<li>any connected graph with <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> nodes and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> edges is a tree</li>
<li>graph <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo>(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>, <strong>subgraph</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi mathvariant="normal">’</mi><mo>=</mo><mo>(</mo><mi>V</mi><mi mathvariant="normal">’</mi><mo separator="true">,</mo><mi>E</mi><mi mathvariant="normal">’</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">G’ = (V’,E’)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord">’</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">’</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">’</span><span class="mclose">)</span></span></span></span> iff <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mi mathvariant="normal">’</mi><mo>⊆</mo><mi>V</mi><mi mathvariant="normal">&amp;</mi><mi>U</mi><mi mathvariant="normal">’</mi><mo>⊆</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">V’\subseteq V \&amp; U’\subseteq U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">’</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">&amp;</span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mord">’</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span></li>
<li><strong>spanning tree</strong> of a connected undirected graph <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> is a subgraph of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> that contains all the nodes and is a tree.</li>
<li>weighted, connected and undirected graph -&gt; <strong>MST</strong>, which is a spanning tree with the minimum sum of weights.</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> is a tree: if it contained a cycle, at least one edge could be removed, allowing a lower weight while preserving the connected property of <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></li>
</ul>
<ol start="2">
<li>
<p>Algorithms</p>
<p><strong>a. Prim’s Algorithm</strong></p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>=</mo><mi>T</mi><mo>∪</mo><mi>T</mi><mi mathvariant="normal">’</mi></mrow><annotation encoding="application/x-tex">V = T \cup T’</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span></span></span></span> , <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">T:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span> nodes added to MST; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">’</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">T’:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span> nodes not in MST</p>
</li>
<li>
<p>For each node <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>∈</mo><mi>T</mi><mi mathvariant="normal">’</mi></mrow><annotation encoding="application/x-tex">v \in T’</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span></span></span></span>, keep a measure <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">D(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> storing <strong>current smallest weight</strong> over all edges that connect <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> to a node in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span></p>
</li>
<li>
<p>Keep <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">P(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> for each node <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>P</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(P(v),  v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> is the edge chosen in MST</p>
</li>
</ul>
<p>Full version:</p>
<ol>
<li>
<p>Pick one node <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span>, set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>s</mi><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">D(s) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">s</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>, for any other node <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>, set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>v</mi><mo>)</mo><mo>=</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">D(v)=\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">P(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span> unknown</p>
</li>
<li>
<p>Set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">’</mi><mo>=</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">T’ = V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span></p>
</li>
<li>
<p>While $T’ \neq \emptyset $</p>
</li>
</ol>
<ul>
<li>For all nodes in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">’</mi></mrow><annotation encoding="application/x-tex">T’</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span></span></span></span>, choose a node <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> that has the smallest <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">D(v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>.</li>
<li>Remove <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> from set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>T</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">T&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li>For <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi mathvariant="normal">’</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">v’s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord">’</span><span class="mord mathdefault">s</span></span></span></span> neighbors <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi></mrow><annotation encoding="application/x-tex">u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span></span></span></span> that still in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi mathvariant="normal">’</mi></mrow><annotation encoding="application/x-tex">T’</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord">’</span></span></span></span>, if exist <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>u</mi><mo>)</mo><mo>&gt;</mo><mi>w</mi><mo>(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">D(u)&gt;w(v,u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span>, then update <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>u</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">D(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo>(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">w(v,u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span>  and <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>(</mo><mi>u</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">P(u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span></li>
</ul>
<p><strong>b. Kruskal’s Algorithm</strong></p>
<p>Greedy Algorithm, union-find data structure</p>
<ul>
<li>sort all the edges <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi mathvariant="normal">.</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">G.E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span> by weight</li>
<li>for edges in <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mi mathvariant="normal">.</mi><mi>E</mi></mrow><annotation encoding="application/x-tex">G.E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord">.</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span> in non-decreasing order, adding them into <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> if no cycle would be created</li>
</ul>
<p>To check whether a cycle will be created, union find: whether two edges have the same root <code>Find</code> ; add them: <code>Union</code></p>
</li>
</ol>
<h2 id="network-flow">Network flow</h2>
<p>网络流问题</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20201030194352143.png" alt="image-20201030194352143" style="zoom:50%;" />
<ul>
<li>对flow的限制：容量限制和流量守恒</li>
<li>Antiparallel: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>v</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>)</mo><mo>∈</mo><mi>E</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext> </mtext><mo>(</mo><msub><mi>v</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>v</mi><mn>1</mn></msub><mo>)</mo><mo>∈</mo><mi>E</mi></mrow><annotation encoding="application/x-tex">(v_1,v_2)\in E \ and \ (v_2,v_1)\in E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span></li>
<li>multiple source and/or sink nodes: super node</li>
</ul>
<p><strong>Maximum Network Flow Problem</strong></p>
<ul>
<li>
<p>Residual graph <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mi>f</mi></msub></mrow><annotation encoding="application/x-tex">G_f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>. (<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><msub><mi>E</mi><mi>f</mi></msub><mi mathvariant="normal">∣</mi><mo>≤</mo><mn>2</mn><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E_f|\leq 2|E|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span></span></span></span>) 残存图</p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20201030200750115.png" alt="image-20201030200750115" style="zoom:50%;" />
</li>
<li>
<p>Argumenting path 增广路径. Residual capacity: on an argumenting path <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span></span></span></span>, the maximum flow that could be added to each edge s. 将沿着增广路径重复增加路径上的流量直到找到一个最大流. How to know we find a maximum flow? A flow is the maximum flow if and only if no argumenting path in the residual networks.</p>
</li>
<li>
<p>cuts of flow networks: One cut <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span> of flow network <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo>(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>, cut the <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> as <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mtext> </mtext><mi>a</mi><mi>n</mi><mi>d</mi><mtext>  </mtext><mi>T</mi><mo>=</mo><mi>V</mi><mo>−</mo><mi>S</mi><mo separator="true">,</mo><mi>s</mi><mo>∈</mo><mi>S</mi><mo separator="true">,</mo><mi>t</mi><mo>∈</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">S \ and\ \  T=V-S, s\in S,t\in T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>.</p>
<p>If <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span> is a flow, then the <strong>net flow</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span> across the cut <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(S, T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span>  is defined to be</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></msub><mi>f</mi><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo><mo>−</mo><msub><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></msub><mi>f</mi><mo>(</mo><mi>v</mi><mo separator="true">,</mo><mi>u</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">f(S,T)=\sum_{u\in S}\sum_{v \in T} f(u,v) - \sum_{u\in S}\sum_{v \in T} f(v,u)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07708em;vertical-align:-0.32708000000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.07708em;vertical-align:-0.32708000000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mclose">)</span></span></span></span></p>
<p>The capacity of a cut <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">S(S,T)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span></span></span></span> is: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo>(</mo><mi>S</mi><mo separator="true">,</mo><mi>T</mi><mo>)</mo><mo>=</mo><msub><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><mi>S</mi></mrow></msub><msub><mo>∑</mo><mrow><mi>v</mi><mo>∈</mo><mi>T</mi></mrow></msub><mi>c</mi><mo>(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">c(S,T)=\sum_{u\in S}\sum_{v \in T} c(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.07708em;vertical-align:-0.32708000000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.17862099999999992em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">v</span><span class="mrel mtight">∈</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32708000000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>.</p>
</li>
<li>
<p>Minimum cut: A <strong>minimum cut</strong> of a network is a cut whose capacity is minimum over all cuts of the network.</p>
</li>
</ul>
<p><strong>Max-flow Min-cun Theorem</strong></p>
<h2 id="algo-examples">Algo. Examples</h2>
<h3 id="counting-inversions-2">counting inversions</h3>
<blockquote>
<p>of low implement: VE477  lab3.1.1</p>
</blockquote>
<p>数逆序对 application: voting theory / analysis of search engines ranking / collaborative filtering</p>
<p>Divide and conquer approach 将list分为两半，recursively sort list并记录count (sort and count). 接着将两个list (merge and count)</p>
<pre><code class="language-pseudocode">Algorithm. (Merge and count)
Input : Two sorted lists: L1 = (l1,1,··· ,l1,n1), L2 = (l2,1,··· ,l2,n2) 
OutpuT: Number of inversions count, and L1 and L2 merged into L
Function MergeCount(L1 , L2 ):
  count ← 0; L ← ∅; i ← 1; j ← 1; 
  while i≤n1 andj≤n2 do
  	if l1,i ≤ l2,j then
  		append l1,i to L; i++;
  	else
  		append l2,j to L; count←count + n1 − i + 1; j++; end if
  end while
  if i &gt; n1 then append l2,j,··· ,l2,n2 to L; 
  else append l1,i,··· ,l1,n1 to counL;
  return count and L
end

Algorithm. (Sort and count)
Input : A list L = (l1,··· ,ln)
Output : The number of inversions count and L sorted

Function SortCount(L):
  if n=1 then return 0 and L; 
  else
  	Split L into L1 = (l1,··· ,l⌈n/2⌉) and L2 = (l⌈n/2⌉+1,··· ,ln); 
  	count1, L1 ← SortCount(L1);
  	count2, L2 ← SortCount(L2);
  	count, L ←MergeCount(L1, L2);
  end if
  count ← count1 + count2 + count;
  return count and L 
end
</code></pre>
<p><strong>time complexity</strong>: For merge O(n)</p>
<p>sort part: every time spilt it into two equal parts, a=2, b=2, f(n) = O(n), <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>b</mi></msub><mi>a</mi></mrow></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo><mo>=</mo><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">T(n) = \Theta(n^{log_ba}logn) = \mathcal{O}(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span><span class="mord mathdefault mtight">a</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></p>
<p>So total for <strong>Sort and Count</strong> is <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><mi>n</mi><mrow><mrow><mi mathvariant="normal">l</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">g</mi></mrow><mi mathvariant="normal">n</mi><mo>)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathcal{O}(n \rm{log} n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord"><span class="mord mathrm">l</span><span class="mord mathrm">o</span><span class="mord mathrm" style="margin-right:0.01389em;">g</span></span><span class="mord mathrm">n</span><span class="mclose">)</span></span></span></span></span></p>
<h3 id="stable-marriage-problem">Stable Marriage Problem</h3>
<p>Algorithm: Gale-Shapley</p>
<blockquote>
<p>Implements 477 Lab3.1.2</p>
</blockquote>
<p>Time complexity <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="script">O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\mathcal{O}(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h3 id="n-queens-puzzle">N Queens Puzzle</h3>
<blockquote>
<p>Implementation: Leetcode #52</p>
</blockquote>
<p>8*8棋盘上，皇后可以横直斜走，格数不限。皇后之间不可以相互攻击-&gt;任何两个皇后不可以在同一行，同一列以及同一斜线上。</p>
<p>backtracking:</p>
<figure data-type="image" tabindex="4"><img src="https://yuxin-miao.github.io/post-images/477images/image-20201017141331951.png" alt="image-20201017141331951" loading="lazy"></figure>
<h2 id="data-structure">Data Structure</h2>
<p>A bit comparison of different data structure.</p>
<p>Array has better memory locality and cache performance, <em>arrays are contiguous memory blocks, so large chunks of them will be loaded into the cache upon first access.</em></p>
<table>
<thead>
<tr>
<th></th>
<th>Dictionary</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>Array (Unsorted/Sorted)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>search(D,k)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>insert(D,k)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>delete(D,k)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>predecessor(D,k)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>successor(D,k)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>minimum(D)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>maximum(D)</code></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>Dictionary using array</strong></p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20201109091428834.png" alt="image-20201109091428834" style="zoom:50%;" />
<p><strong>Dictionary using linked structure</strong></p>
<h2 id="hashing">Hashing</h2>
<h3 id="basics">Basics</h3>
<ul>
<li><strong>Setup:</strong> a universe <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span> of objects (eg. all names, .., very big)</li>
<li><strong>Goal:</strong> maintain an evovling set <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>⊆</mo><mi>U</mi></mrow><annotation encoding="application/x-tex">S\subseteq U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⊆</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span></span></span></span> (eg. 100 names, … ,reasonable size)</li>
<li>original solution: array based / linked list based</li>
</ul>
<p><strong>Better solution</strong></p>
<ul>
<li>Hash table, an array A of <strong>n buckets</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mi>c</mi><mi mathvariant="normal">∣</mi><mi>S</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">n=c|S|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord">∣</span></span></span></span></li>
<li>hashing function <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>:</mo><mi>U</mi><mo>→</mo><mrow><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mrow><annotation encoding="application/x-tex">h: U \rightarrow {0,1,…,n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span></span></li>
<li>store item <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> in A[h(k)]</li>
</ul>
<p>Collision: item with differnet search keys hashed into the same buckets (to solve: seperate chaining / open addressing)</p>
<p><strong>Hash Function Design Criteria:</strong></p>
<img src="https://github.com/yuxin-miao/yuxin-miao.github.io/raw/master/post-images/477images/image-20200928093101940.png" alt="image-20200928093101940" style="zoom:33%;" />]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VE280 Review]]></title>
        <id>https://yuxin-miao.github.io/post/ve280-review/</id>
        <link href="https://yuxin-miao.github.io/post/ve280-review/">
        </link>
        <updated>2020-08-03T01:03:11.000Z</updated>
        <summary type="html"><![CDATA[<p>Review notes for VE280 (Programming and Elementary Data Structure) | SU2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Review notes for VE280 (Programming and Elementary Data Structure) | SU2020 @UM-SJTU JI, Shanghai Jiao Tong University.</p>
<!-- more -->
<p>Some useful commands for 280.</p>
<pre><code class="language-bash">tar zxvf p5.tar // 解包p5.tar到当前mu lu
tar -cf new.tar *.cpp *.h *.txt // 打包当前目录下所有.h .cpp .txt文件到 new.tar
tar -cf try.tar final // 打包final文件夹为try.tar 
tar -xzf XYZ.tgz // to decompress and the command 
tar -czf XYZ.tgz XYZ // to compress.
</code></pre>
<pre><code class="language-Cmake">cmake_minimum_required(VERSION 3.16)
project(final)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS &quot;-Wall -Wextra -Werror -pedantic&quot;)
add_executable(final review/main.cpp)
add_executable(Q1 Q1/q1.cpp)
add_executable(final2 review/memory.cpp)
add_executable(final3 review/deepCopy.cpp)
</code></pre>
<h2 id="adt-abstract-data-type">ADT: Abstract Data Type</h2>
<p>An ADT provides an <strong>abstract</strong> <strong>description</strong> of <strong>values</strong> and <strong>operations</strong></p>
<ul>
<li>information hiding</li>
<li>encapsulation</li>
</ul>
<p>member function call: The other members of the object are also visible to the function members!</p>
<p><strong>representation invariants / rep invariants</strong>: This invariant is a rule that the representation must obey both <strong>immediately before</strong> and <strong>immediately after</strong> any method's execution. eg. rep invariants for the following code is</p>
<ul>
<li>Represent a set of size N as an <strong>unordered</strong> array of integers with no duplicates, stored in the first N slots of the array.</li>
<li>int numElts: maintains the number of elements currently in the array.</li>
</ul>
<pre><code class="language-c++">const int MAXELTS = 100;
class IntSet { /* Implement with fixed size array */
    // OVERVIEW: a mutable set of integers, |set| &lt;= MAXELTS
      int elts[100]; 
  		int numElts;
  		int indexOf(int v) const; // RME
  public:
  	IntSet()::numElts(0); 
    void insert(int v); // RME
    void remove(int v); // RME
    bool query(int v); // RME
    int  size(); // RME
};
</code></pre>
<p>When <code>remove</code>, the representation invariants violated is</p>
<ul>
<li>The requirement that the first N values occupy first N slots of the array</li>
<li>numElts does not maintain the number of elements currently in the array</li>
</ul>
<p>Invariants can also be coded, to check the <strong>sanity of the structure.</strong> Eg. for sorted IntSet()</p>
<pre><code class="language-c++">bool strictSorted(int a[], int size)
// REQUIRES: a has size elements
// EFFECTS: returns true if a is sorted with no duplicates
bool repOK(){ // as a private method 
      // EFFECTS: returns true if the rep. invariants hold
    return strictSorted(elts, numElts);
}
// add in the class member function when modifies this 
assert(repOK());
</code></pre>
<p><strong>Initialization syntax</strong> <em>FIRST</em>: The initialization list initializes variables; <em>SECOND:</em> <strong>The body of the constructor executes</strong></p>
<p>const member function will not change <code>this</code>, as <code>this</code> is a pointer to const instance. Only can call other member function that are const.</p>
<h2 id="subtype">Subtype</h2>
<p>S is a subtype of T, &quot;S &lt;: T&quot;, T is a supertype of S. When type T is expected, an object of type S can be supplied without changing the correctness of the original computation.</p>
<p><strong>Substituion Principle</strong></p>
<ul>
<li>The new method must do everything the old method did, but it is allowed to do more as well</li>
<li>It must require no more of the caller than the old method did, but it can require less.</li>
</ul>
<pre><code class="language-c++">void add(istream &amp;source) {
	double n1, n2;
	source &gt;&gt; n1 &gt;&gt; n2;
    cout &lt;&lt; n1 + n2;
}
int main(){
    ifstream inFile;
    inFile.open(&quot;test.in&quot;)
		add(inFile); // no type conversion, it calls function add of ifstream
    inFile.close();
}
</code></pre>
<p><strong>Create a subtype</strong></p>
<ul>
<li>
<p>add one or more operations</p>
</li>
<li>
<p>strengthen the postcondition of one or more operations</p>
<p>PostCondition:</p>
<ul>
<li>The EFFECTS clause: promising <u>everything you used to</u>, plus extra.</li>
<li>its return type</li>
</ul>
</li>
<li>
<p>weaken the preconditions of one or more operations</p>
<ul>
<li>The REQUIRES clause: could not only accept all previous conditions, but accept more (that would not be accepted before)</li>
<li>its argument type</li>
</ul>
</li>
</ul>
<h3 id="inheritance-subclassing">Inheritance (subclassing)</h3>
<p>it is possible to create <strong>subclasses</strong> that are <strong>NOT</strong> <strong>subtypes</strong> and don't follow the substitution principle.</p>
<pre><code class="language-c++">class bar : /* access */ foo { // derived class bar, derived from foo
	... // bar is a foo, possibly with extra space / with new or redifined member function
};
</code></pre>
<p>When a class (called derived, child class or subclass) inherits from another class (base, parent class, or superclass), the derived class is automatically populated with almost everything from the base class.</p>
<ul>
<li>This includes member variables, functions, types, and even static members.</li>
<li>The only thing that does not come along is friendship-ness.</li>
</ul>
<p><strong>Access specifier</strong> - default: <code>private</code></p>
<ol>
<li>
<p><code>access</code> is <code>private</code> method: public / private / protected member objects are all become <code>private</code></p>
<p>neither the derived class nor the outside could access any of them</p>
</li>
<li>
<p><code>access</code> is <code>protected</code> method: <code>private</code> -&gt; <code>private</code>;<code>protected / public</code>:  <code>protected</code></p>
</li>
<li>
<p><code>access</code> is <code>public</code> method: <code>private</code> -&gt; <code>private</code>;<code>protected / public</code>:  <code>public</code></p>
</li>
</ol>
<p><strong>Constructors and destructors</strong></p>
<p>constructor will call from parent to son, destructor will call from son to parent. All will be called.</p>
<pre><code class="language-c++">class Parent {
public:
    Parent() { cout &lt;&lt; &quot;Parent::Constructor\n&quot;; }
    virtual ~Parent() { cout &lt;&lt; &quot;Parent::Destructor\n&quot;; }
};

class Child : public Parent {
public:
    Child() : Parent() { cout &lt;&lt; &quot;Child::Constructor\n&quot;; }
    ~Child() override { cout &lt;&lt; &quot;Child::Destructor\n&quot;; }
};

class GrandChild : public Child {
public:
    GrandChild() : Child() { cout &lt;&lt; &quot;GrandChild::Constructor\n&quot;; }
    ~GrandChild() override { cout &lt;&lt; &quot;GrandChild::Destructor\n&quot;; }
};

int main() {
    GrandChild gc;
}
</code></pre>
<p>output:</p>
<pre><code class="language-bash">Parent::Constructor
Child::Constructor
GrandChild::Constructor
GrandChild::Destructor
Child::Destructor
Parent::Destructor
</code></pre>
<h3 id="inheritance-subtyping">Inheritance &amp; Subtyping</h3>
<p>Inheritance is neither a sufficient nor a necessary condition of subtyping relation. Yet, it is the only subtyping method supported by C++ (without a hack) in runtime.</p>
<pre><code class="language-c++">// Creat subtype by copy and paste
class A {
public:
    void quak(){} 
};
class B { // B :&lt; A
public:
    void quak(){} 
    void nop(){}
};

// Private inheritance prevents D to be a subtype of A, only a subclass
class C {
    int priv;
};
class D : C {};
</code></pre>
<h3 id="keyword-virtual">Keyword <code>Virtual</code></h3>
<p>Consider the apparent type and actual type:</p>
<ul>
<li>Apparent Type: Apparent type is the type annotated by the type system. It is the static type information. It is the you remarked to the compiler.</li>
<li>Actual Type: It is the data type of the actual instance. It is the data type that describes what exactly is in the memory.</li>
</ul>
<p>&quot;someone might override my implementation: always check at run-time to see which version to call.”</p>
<h2 id="interface">Interface</h2>
<p><strong>Interface:</strong> the contract for using this type</p>
<p>Base class: interface-only, <strong>abstract base class or virtual base clss</strong></p>
<ul>
<li>Declare each method as a virtual function</li>
<li>“Assign” a zero to each of these virtual function</li>
</ul>
<pre><code class="language-c++">// in .h
class IntSet { // a mutable set of integers
   public: // could not provide constructor
   // pure virtual functions, as a set of function pointers 
     virtual void insert(int v) = 0; // this + {v}
     virtual void remove(int v) = 0; // this – {v}
     virtual bool query(int v) = 0; // does v exist in this?
     virtual int  size() = 0; // return |this|
  };
IntSet *getIntSet(); // for an access function
	  // EFFECTS: returns a pointer to the IntSet
</code></pre>
<ul>
<li>No instance of an abstract class could be created, no implementation provided</li>
<li>The derived class need to implement the constructor</li>
</ul>
<pre><code class="language-c++">// in .cpp
static IntSetImpl impl;
Intset* getIntSet() {
	return&amp; impl;
}
</code></pre>
<p>So the user could use <code>IntSet *s = getIntSet();</code></p>
<ul>
<li>Derived class pointer compatible to base class.</li>
<li>Derived class instance compatible to base class (possibly <code>const</code>) reference.</li>
<li>You can assign a derived class object to a base class object.</li>
</ul>
<p>The reverse is generally false. E.g. assigning a base class pointer to derived class pointers needs special casting.</p>
<pre><code class="language-c++">class ISummable { 
public:
	/* Add item x to itself */
	virtual void add(ISummable&amp; x) = 0; 
};
// This class models the objects that are summable. 
// Based on this modeling, we could write the following very general function: 
void sum(ISummable elem[],size_t size, ISummable&amp; rst) {
	for (int i = 0; i &lt; size; ++i) 
		rst.add(elem[i]); 
}
// This will work for anything that is Summable object. 
// When a class derives from an interface and provides an implementation, 
// we say it implements the interface.
</code></pre>
<h3 id="casting">Casting</h3>
<p><strong>dynamic_cast</strong></p>
<p>In C++, dynamic casting is primarily used to safely downcast like casting a base class pointer (or reference) to a derived class pointer (or reference). It can also be used for upcasting, i.e. casting a derived class pointer (or reference) to a base class pointer (or reference).</p>
<ul>
<li>To use <code>dynamic_cast&lt;new_type&gt;(ptr)</code>, the base class should contain at least one virtual function.</li>
<li>Dynamic casting checks consistency at runtime; hence, it is slower than static cast</li>
</ul>
<pre><code class="language-c++">class Shape{
    string s_name;
public:
    Shape(string name): s_name(name){}
    virtual void get_info(){ cout&lt;&lt;s_name&lt;&lt;endl; }
};

class Square : public Shape{
    int side;
public:
    Square(string S_name, int value) : Shape(S_name), side(value){}
    void get_info(){ cout&lt;&lt;&quot;Area of the square is: &quot;&lt;&lt;side * side&lt;&lt;endl; }
};

class Rectangle : public Shape{
    int length;
    int width;
public:
    Rectangle(string S_name, int len, int wid) : Shape(S_name), length(len), width(wid){}
    void get_info() override { cout&lt;&lt;&quot;Area of the rectangle is: &quot;&lt;&lt;length * width&lt;&lt;endl; }
};

Shape* create_square(string S_name, int value){
    return new Square(S_name, value);
}

Rectangle* create_rectangle(string S_name, int len, int wid){
    return new Rectangle(S_name, len, wid);
}

int main() {
    // quad is the pointer to the parent class, 
    // it needs to be casted to be used to
    // access the method of the child class.
    Shape *quad = create_square(&quot;Quadliteral&quot;, 4);
    // Trying to downcast the parent class pointer to
    // the child class pointer.
    Square* sq = dynamic_cast&lt;Square*&gt;(quad);
    // dynamic_cast returns returns null if the type
    // to be casted into is a pointer and the cast
    // is unsuccessful.
    if(sq){
        sq -&gt; get_info();
    }
    Rectangle *rect = create_rectangle(&quot;Quadliteral&quot;, 4, 5);
    
    // An example of a valid upcasting
    Shape* quad1 = dynamic_cast&lt;Shape*&gt;(rect);
 
    // An example of invalid downcasting
    Square* sq1 = dynamic_cast&lt;Square*&gt;(quad1);
    if(!sq1){
        cout&lt;&lt;&quot;Invalid casting.&quot;&lt;&lt;endl;
    }
}

</code></pre>
<h2 id="dynamic-memory">Dynamic Memory</h2>
<p><strong>Static</strong></p>
<ul>
<li>Global: have the same lifie time of the program. Reserved the space before the program begins, at complie time.</li>
<li>local variables: defined whitin a block, including <strong>function arguments</strong>. Reserved the space at run time, known size to the compiler.</li>
</ul>
<p><strong>Dynamic</strong> complier don’t no the size and how long it lives.</p>
<h3 id="memory-management">Memory Management</h3>
<p>Each running program has its own memory layout, separated from other programs. The layout consists of a lot of segments, including:</p>
<ul>
<li><code>stack</code>: stores local variables</li>
<li><code>heap</code>: dynamic memory for programmer to allocate</li>
<li><code>data</code>: stores global variables, separated into initialized and uninitialized</li>
<li><code>text</code>: stores the code being executed</li>
</ul>
<p>In order to pinpoint each memory location in a program’s memory, we assign each byte of memory an “address”. The addresses go from 0 all the way to the largest possible address, depending on the machine. As the figure below, the <code>text</code>, <code>data</code>, and <code>stack</code> segments have low address numbers, while the <code>stack</code> memory has higher addresses.</p>
<h3 id="new-and-delete"><code>new</code> and <code>delete</code></h3>
<p>new and new[] does the following:</p>
<ul>
<li>Allocates space in heap (for one or a number of objects).</li>
<li>Constructs object in-place (including, but not limited to ctor).</li>
<li>Returns the “first” address.</li>
</ul>
<pre><code class="language-c++">Type* obj0 = new Type; // Default construction
Type* obj1 = new Type(); // Default construction
Type* obj2 = new Type(arg1, arg2);
Type* objA0 = new Type[size]; // Default cons each elt
Type* objA1 = new Type[size](); // Same as obj A0
</code></pre>
<p><code>delete</code> and <code>delete[]</code> releases the objects allocated from <code>new</code> and <code>new[]</code> respectively. They does the following:</p>
<ul>
<li>Destroy the object (each object in the array) being released (by calling the destructor of the object).</li>
<li>Returns the memory to the system.</li>
</ul>
<pre><code class="language-c++">int num = 100;
int *array = new int[num];
delete [] array;
</code></pre>
<h3 id="destructor">Destructor</h3>
<p>The destructors for any ADTs declared locally within a block of code are <strong>called automatically when the block ends</strong>.</p>
<pre><code class="language-c++">{
	IntSet ip = IntSet(50);
	...		
} // ip will be destroyed by calling its destructor
</code></pre>
<p>Destructor of ADT will also be <strong>called when using <code>delete</code></strong>. A effective destructors should:</p>
<ul>
<li>Be named as <code>~ClassName</code></li>
<li>Takes no argument and returns nothing <em>(not even void)</em></li>
<li>If one expect the class to be inherited the <strong>destructor should be declared as <code>virtual</code></strong> (or double delete may happen)</li>
<li>Release resource allocated only in this class, do not release base class resources!!!</li>
</ul>
<p>Consider that in lab8:</p>
<pre><code class="language-c++">Node::~Node() {
  	// EFFECTS: destroy the whole tree rooted at sub
    // MODIFIES: this
    for(int i = 0; i &lt; this-&gt;child_num; i++) { delete(children[i]); }
    delete[] children;
}
</code></pre>
<p><strong>double deletion</strong></p>
<pre><code class="language-c++">class Base {
protected:
    int *p;
public:
    Base() : p(new int(10)) {}
    virtual ~Base() {delete p;}
};

class Derived : public Base {
    int *q;
public:
    Derived() : Base(), q(new int(20)) {}
    virtual ~Derived() override {delete p; delete q;}
};

/* A */
void main() {
	Base* ptrA = new Derived; // double deletion occurs, destructor of both base and derived will be called 
	delete ptrA;
}

/* B */
void main() {
	Derived* ptrB = new Derived; // double deletion occurs, destructor of both base and derived will be called 
	delete ptrB;
}

/* To correct */
class Derived : public Base { // in the derived class, it should not delete ANYTHING in the base class
    int *q;
public:
    Derived() : Base(), q(new int(20)) {}
    virtual ~Derived() override {delete q;}
};
</code></pre>
<h2 id="deep-copy">Deep Copy</h2>
<p><strong>Shallow copy</strong></p>
<p>the default copy constructor and default assignment operators it provides use a copying method known as a member-wise copy, also known as a <em>shallow copy</em>. This works well if the fields are values, but may not be what you want for fields that point to dynamically allocated memory. The pointer will be copied. but the memory it points to will not be copied: the field in both the original object and the copy will then point to the same dynamically allocated memory, this causes problem at erasure, causing dangling pointers.</p>
<p><strong>Deep copy</strong></p>
<p>ecall binary tree and in-order traversal. We define that a good tree is a binary tree with ascending in-order traversal. How to deep copy a template good tree provided interface:</p>
<pre><code class="language-c++">template &lt;class T&gt; 
class GoodTree { 
		T *op; 
		GoodTree *left; 
		GoodTree *right; 
public:
  	void removeAll(); 
  	// EFFECTS: remove all things of &quot;this&quot; 
  	void insert(T *op); 
  	// REQUIRES: T type has a linear order &quot;&lt;&quot; 
  	// EFFECTS: insert op into &quot;this&quot; with the correct location
  	//					Assume no duplicate op.
};
template &lt;class T&gt; 
void GoodTree&lt;T&gt;::copy_helper(const GoodTree&lt;T&gt; *t) { 
  	if (t == nullptr) 
      	return; 
  	T *tmp = new(t-&gt;op); 
  	insert(tmp); 
  	copy_helper(t-&gt;left); 
  	copy_helper(t-&gt;right); 
}

template &lt;class T&gt; 
void GoodTree&lt;T&gt;::copyAll(const GoodTree&lt;T&gt; &amp;t) {
		removeAll();
  	copy_helper(&amp;t); 
}
</code></pre>
<p>You may use <code>removeAll</code> and <code>insert</code> in your <code>copyAll</code> method.</p>
<h2 id="dynamic-resizing">Dynamic Resizing</h2>
<h2 id="linked-list">Linked List</h2>
<h2 id="template-container">Template &amp; Container</h2>
<h3 id="container-of-pointers-1-invariant-3-rules">Container of pointers: 1 invariant &amp; 3 rules</h3>
<ul>
<li><em>At-most-once invariant</em>: any object can be linked to at most one container at any time through pointer.</li>
</ul>
<ol>
<li><em>Existence</em>: An object must be dynamically allocated before a pointer to it is inserted.</li>
<li><em>Ownership</em>: Once a pointer to an object is inserted, that object becomes the property of the container. No one else may use or modify it in any way.</li>
<li><em>Conservation</em>: When a pointer is removed from a container, either the pointer must be inserted into some container, or its referent must be deleted.</li>
</ol>
<h2 id="operator-overloading">Operator Overloading</h2>
<ol>
<li>Overloaded operator has a return type and a parameter list</li>
</ol>
<p>Keyword - operator; followed by the symbol</p>
<pre><code class="language-C++">// nonmember function &amp; binary operator
A operator+ (const A&amp;left, const A&amp;right) // return left + right
  
// class member function &amp; binary operator
A A::operator+(const A&amp;left, const A&amp;right) // return *this + right
// class member function &amp; unary operator
A &amp;A::operator+=(const A&amp;right) // return *this + right, modifies this 
</code></pre>
<ol start="2">
<li>
<p>friendship</p>
<p>friend declared inside the class, but the friend object or friend class are not the member of that class.</p>
<p>Friend function: expose the private state of one class to another function (and only that function) explicitly.</p>
<p>Friend class:  expose the private state of one class to another class (and only that class) explicitly.</p>
<pre><code class="language-c++">class foo {
    friend class bar; // not a member of foo
    friend void baz(); // not a member of foo
    int f; // private member 
};
class bar { ... };  // objects of class bar can access private member f of foo
void baz() { ... } 
</code></pre>
<pre><code class="language-c++">class Complex {
  // OVERVIEW: a complex number class
  double real;
  double imag;
public:
  Complex(double r=0, double i=0); // Constructor
  Complex &amp;operator += (const Complex &amp;o);
// MODIFIES: this
// EFFECTS: adds this complex number with the // complex number o and return a reference
// to the current object.
  friend Complex operator+(const Complex &amp;o1,const Complex &amp;o2);
};

Complex operator + (const Complex &amp;o1, const Complex &amp;o2) {
	Complex rst;
	rst.real = o1.real + o2.real; rst.imag = o1.imag + o2.imag; 
  return rst;
}
</code></pre>
</li>
<li>
<p>Example for different operators</p>
<p><strong>opeartor[]</strong> - binary operator</p>
<p><em>const version and nonconst versio</em> needed. call non-const version first</p>
<pre><code class="language-c++">const int &amp;IntSet::operator[](int i) const { 
  // with some const object or whithin some const member function
  if(i &gt;= 0 &amp;&amp; i &lt; numElts) 
    return elts[i]; 
  else throw -1;
}

int &amp;IntSet::operator[](int i) { 
  // when assign an element through the subscript eg. is[5]=2
  if(i &gt;= 0 &amp;&amp; i &lt; numElts) 
    return elts[i]; 
  else throw -1;
}
</code></pre>
<p><strong>operator&lt;&lt; &amp;&amp; operator &gt;&gt;</strong>  - binary</p>
<p><em>returns a reference its ostream parameter</em> - so could chained together</p>
<p>must be <em>nonmember</em> function -first operand: ostream type, not of the class type</p>
<pre><code class="language-c++">ostream &amp;operator&lt;&lt;(ostream &amp;os, const IntSet &amp;is){ 
  // not return const parameter - may be changed 
  for(int i = 0; i &lt; is.size(); i++)
    os &lt;&lt; is[i] &lt;&lt; &quot; &quot;;
  return os;
}
istream &amp;operator&gt;&gt;(istream &amp;is, foo &amp;obj){ 
  ...
    return is; 
}
</code></pre>
</li>
</ol>
<h2 id="linear-list">Linear List</h2>
<p>A collection of zero or more integers; <strong>duplicates possible.</strong>  Insertion and removal <strong>by position</strong> (remember to check the boundary condition)</p>
<pre><code class="language-c++">   void insert(int i, int v) // if 0 &lt;= i &lt;= N 
   // (N is the size of the list), insert v at position i
   // otherwise, throws BoundsError exception.

</code></pre>
<h2 id="stack">Stack</h2>
<p><strong>LIFO</strong> access: last in, first out (restriction from linear list) 一叠盘子 insert at first, remove from first</p>
<p>Through <em>single-ended, singly-linked list</em>, top be the first node</p>
<pre><code>size(): number of elements in the stack.
isEmpty(): checks if stack has no elements.
push(Object o): add object o to the top of stack.
pop(): remove the top object if stack is not empty; otherwise, throw stackEmpty.
Object &amp;top(): return a reference to the top element.
</code></pre>
<h2 id="queue">Queue</h2>
<p><strong>FIFO</strong> access: first in, first out 一个队列 insert at last, remove from the front</p>
<p>Through <em>double-ended, singly-linked list</em> or <em>circular array</em></p>
<pre><code>size(): number of elements in the queue.
isEmpty(): check if queue has no elements.
enqueue(Object o): add object o to the rear of the queue.
dequeue(): remove the front object of the queue if not empty; otherwise, throw queueEmpty.
Object &amp;front(): return a reference to the front element of the queue.
Object &amp;rear(): return a reference to the rear element of the queue.
</code></pre>
<p><em>Circular array</em></p>
<pre><code class="language-c++">// If front(or rear) == MAXSIZE-1, the statement sets front(or rear) to 0.
front = (front+1) % MAXSIZE;
rear = (rear+1) % MAXSIZE;

// need to distinguish between the full array and empty array
// add size 
</code></pre>
<h2 id="deque">Deque</h2>
<p>Double-ended queue, A combination of stack and queue. Items can be inserted and removed from <strong>both ends</strong> of the list.</p>
<p>Through <em>Double-ended doubly-linked list</em> or <em>Circular array</em></p>
<h2 id="stl">STL</h2>
<p>defines powerful, template-based, reusable components that implements common data structures and algorithms</p>
<p>Three components:</p>
<ul>
<li>
<p>containers</p>
</li>
<li>
<p>iterators</p>
<p>pointers to the elements of containers.</p>
<pre><code class="language-c++">vector&lt;int&gt;::iterator it;
// could not change the value pointed by the const_iterator through const_iterator
vector&lt;string&gt;::const_iterator itConst; 
*itConst = &quot;Wrong operation&quot; 
</code></pre>
</li>
<li>
<p>algorithms</p>
</li>
</ul>
<p>Common operations for all three different types</p>
<p>Common operations</p>
<pre><code class="language-c++">C&lt;T&gt; c; // creates an empty container
C&lt;T&gt; c1(c2); // copies elements from c2 into c1, c2 must be the same type as c1
C&lt;T&gt; c(b, e); // b and e are iterators denoting a sequence. Copy elements from the sequence into c
begin(), end(), size(), empty(), clear(), =
</code></pre>
<h3 id="sequential-container">Sequential Container</h3>
<p>Elements' order controlled by the programmer, independent of the value of the elements</p>
<h4 id="vector">vector</h4>
<ul>
<li>
<p>based on array, collection of a single type objects</p>
</li>
<li>
<p>Supports fast random access.</p>
</li>
<li>
<p>Fast insert/delete at front or back.</p>
</li>
<li>
<p>Iterator</p>
<p>Iterator Arithmetic <code>iter+n, iter-n</code></p>
<p>Relational Operation on Iterator <code>&gt;, &gt;=, &lt;, &lt;=</code> Compare the postion, ahead means smaller</p>
</li>
</ul>
<pre><code class="language-c++">vector&lt;int&gt; v;
vector&lt;int&gt;::iterator it = v.begin(); 
// v.end() : not denote an actual element, positioning to one-past-the-end
vector&lt;int&gt;::iterator mid = v.begin() + v.size()/2;

// sizeof(int) in the example is the sizeof(type name); sizeof(a) is the sizeof(obj)
// sizeof an array is equivalent to taking the sizeof the element type times the number of elements in the array
int a[] = {1, 2, 3, 4};
unsigned int sz = sizeof(a)/sizeof(int);
vector&lt;int&gt; vi(a, a+sz);
</code></pre>
<h4 id="deque-2">deque</h4>
<ul>
<li>based on array</li>
<li>Supports fast random access.</li>
<li>Fast insert/delete at front or back.</li>
</ul>
<h4 id="list">List</h4>
<ul>
<li>based on a doubly-linked list</li>
<li>Fast insert/delete at any point in the list.</li>
</ul>
<p>no Iterator Arithmetic</p>
<h3 id="associative-container">Associative Container</h3>
<p>Elements' order based on value, irrelevant to their insertion order</p>
<h4 id="map-associative-array">map / associative array</h4>
<p>Elements in map are ordered by keys,</p>
<ul>
<li>
<p>Subscripting a vector = dereferencing a vector iterator</p>
<p>Subscripting a map ≠ dereferencing a map iterator (if not exist this key, new key will be  created)</p>
</li>
</ul>
<h3 id="container-adapters">Container Adapters</h3>
<p>container adaptor takes an existing container type and makes it act like a different abstract data type</p>
<h4 id="stack-2">Stack</h4>
<ul>
<li>sequential container adaptors</li>
<li>use a sequential container <code>c</code> to initialize, <code>c</code> must be deque</li>
</ul>
<h4 id="queue-2">Queue</h4>
<ul>
<li>sequential container adaptors</li>
<li>use a sequential container <code>c</code> to initialize, <code>c</code> must be deque</li>
</ul>
<h2 id="dictionary">Dictionary</h2>
<ul>
<li>optimized to quickly <strong>add</strong> <strong>(key, value)</strong> pair and <strong>retrieve</strong> <strong>value</strong> by key.</li>
<li>one key could only associated to one value in a dictionary</li>
</ul>
]]></content>
    </entry>
</feed>